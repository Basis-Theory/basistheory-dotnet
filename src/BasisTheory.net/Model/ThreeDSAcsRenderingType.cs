/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// ThreeDSAcsRenderingType
    /// </summary>
    [DataContract]
    public partial class ThreeDSAcsRenderingType :  IEquatable<ThreeDSAcsRenderingType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSAcsRenderingType" /> class.
        /// </summary>
        /// <param name="acsInterface">acsInterface.</param>
        /// <param name="acsUiTemplate">acsUiTemplate.</param>
        public ThreeDSAcsRenderingType(string acsInterface = default(string), string acsUiTemplate = default(string))
        {
            this.AcsInterface = acsInterface;
            this.AcsUiTemplate = acsUiTemplate;
            this.AcsInterface = acsInterface;
            this.AcsUiTemplate = acsUiTemplate;
        }

        /// <summary>
        /// Gets or Sets AcsInterface
        /// </summary>
        [DataMember(Name="acsInterface", EmitDefaultValue=true)]
        public string AcsInterface { get; set; }

        /// <summary>
        /// Gets or Sets AcsUiTemplate
        /// </summary>
        [DataMember(Name="acsUiTemplate", EmitDefaultValue=true)]
        public string AcsUiTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThreeDSAcsRenderingType {\n");
            sb.Append("  AcsInterface: ").Append(AcsInterface).Append("\n");
            sb.Append("  AcsUiTemplate: ").Append(AcsUiTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSAcsRenderingType);
        }

        /// <summary>
        /// Returns true if ThreeDSAcsRenderingType instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSAcsRenderingType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSAcsRenderingType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcsInterface == input.AcsInterface ||
                    (this.AcsInterface != null &&
                    this.AcsInterface.Equals(input.AcsInterface))
                ) && 
                (
                    this.AcsUiTemplate == input.AcsUiTemplate ||
                    (this.AcsUiTemplate != null &&
                    this.AcsUiTemplate.Equals(input.AcsUiTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcsInterface != null)
                    hashCode = hashCode * 59 + this.AcsInterface.GetHashCode();
                if (this.AcsUiTemplate != null)
                    hashCode = hashCode * 59 + this.AcsUiTemplate.GetHashCode();
                return hashCode;
            }
        }

    }

}
