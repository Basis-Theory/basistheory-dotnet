/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// ThreeDSMerchantInfo
    /// </summary>
    [DataContract]
    public partial class ThreeDSMerchantInfo :  IEquatable<ThreeDSMerchantInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSMerchantInfo" /> class.
        /// </summary>
        /// <param name="mid">mid.</param>
        /// <param name="acquirerBin">acquirerBin.</param>
        /// <param name="name">name.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="categoryCode">categoryCode.</param>
        /// <param name="riskInfo">riskInfo.</param>
        public ThreeDSMerchantInfo(string mid = default(string), string acquirerBin = default(string), string name = default(string), string countryCode = default(string), string categoryCode = default(string), ThreeDSMerchantRiskInfo riskInfo = default(ThreeDSMerchantRiskInfo))
        {
            this.Mid = mid;
            this.AcquirerBin = acquirerBin;
            this.Name = name;
            this.CountryCode = countryCode;
            this.CategoryCode = categoryCode;
            this.Mid = mid;
            this.AcquirerBin = acquirerBin;
            this.Name = name;
            this.CountryCode = countryCode;
            this.CategoryCode = categoryCode;
            this.RiskInfo = riskInfo;
        }

        /// <summary>
        /// Gets or Sets Mid
        /// </summary>
        [DataMember(Name="mid", EmitDefaultValue=true)]
        public string Mid { get; set; }

        /// <summary>
        /// Gets or Sets AcquirerBin
        /// </summary>
        [DataMember(Name="acquirer_bin", EmitDefaultValue=true)]
        public string AcquirerBin { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="country_code", EmitDefaultValue=true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets CategoryCode
        /// </summary>
        [DataMember(Name="category_code", EmitDefaultValue=true)]
        public string CategoryCode { get; set; }

        /// <summary>
        /// Gets or Sets RiskInfo
        /// </summary>
        [DataMember(Name="risk_info", EmitDefaultValue=false)]
        public ThreeDSMerchantRiskInfo RiskInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThreeDSMerchantInfo {\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  AcquirerBin: ").Append(AcquirerBin).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  RiskInfo: ").Append(RiskInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSMerchantInfo);
        }

        /// <summary>
        /// Returns true if ThreeDSMerchantInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSMerchantInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSMerchantInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mid == input.Mid ||
                    (this.Mid != null &&
                    this.Mid.Equals(input.Mid))
                ) && 
                (
                    this.AcquirerBin == input.AcquirerBin ||
                    (this.AcquirerBin != null &&
                    this.AcquirerBin.Equals(input.AcquirerBin))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CategoryCode == input.CategoryCode ||
                    (this.CategoryCode != null &&
                    this.CategoryCode.Equals(input.CategoryCode))
                ) && 
                (
                    this.RiskInfo == input.RiskInfo ||
                    (this.RiskInfo != null &&
                    this.RiskInfo.Equals(input.RiskInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mid != null)
                    hashCode = hashCode * 59 + this.Mid.GetHashCode();
                if (this.AcquirerBin != null)
                    hashCode = hashCode * 59 + this.AcquirerBin.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CategoryCode != null)
                    hashCode = hashCode * 59 + this.CategoryCode.GetHashCode();
                if (this.RiskInfo != null)
                    hashCode = hashCode * 59 + this.RiskInfo.GetHashCode();
                return hashCode;
            }
        }

    }

}
