/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// CreateThreeDSSessionResponse
    /// </summary>
    [DataContract(Name = "CreateThreeDSSessionResponse")]
    public partial class CreateThreeDSSessionResponse : IEquatable<CreateThreeDSSessionResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateThreeDSSessionResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="cardBrand">cardBrand.</param>
        /// <param name="methodUrl">methodUrl.</param>
        /// <param name="methodNotificationUrl">methodNotificationUrl.</param>
        /// <param name="directoryServerId">directoryServerId.</param>
        /// <param name="recommendedVersion">recommendedVersion.</param>
        public CreateThreeDSSessionResponse(Guid id = default(Guid), string type = default(string), string cardBrand = default(string), string methodUrl = default(string), string methodNotificationUrl = default(string), string directoryServerId = default(string), string recommendedVersion = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.CardBrand = cardBrand;
            this.MethodUrl = methodUrl;
            this.MethodNotificationUrl = methodNotificationUrl;
            this.DirectoryServerId = directoryServerId;
            this.RecommendedVersion = recommendedVersion;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets CardBrand
        /// </summary>
        [DataMember(Name = "cardBrand", EmitDefaultValue = true)]
        public string CardBrand { get; set; }

        /// <summary>
        /// Gets or Sets MethodUrl
        /// </summary>
        [DataMember(Name = "method_url", EmitDefaultValue = true)]
        public string MethodUrl { get; set; }

        /// <summary>
        /// Gets or Sets MethodNotificationUrl
        /// </summary>
        [DataMember(Name = "method_notification_url", EmitDefaultValue = true)]
        public string MethodNotificationUrl { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryServerId
        /// </summary>
        [DataMember(Name = "directory_server_id", EmitDefaultValue = true)]
        public string DirectoryServerId { get; set; }

        /// <summary>
        /// Gets or Sets RecommendedVersion
        /// </summary>
        [DataMember(Name = "recommended_version", EmitDefaultValue = true)]
        public string RecommendedVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateThreeDSSessionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  MethodUrl: ").Append(MethodUrl).Append("\n");
            sb.Append("  MethodNotificationUrl: ").Append(MethodNotificationUrl).Append("\n");
            sb.Append("  DirectoryServerId: ").Append(DirectoryServerId).Append("\n");
            sb.Append("  RecommendedVersion: ").Append(RecommendedVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateThreeDSSessionResponse);
        }

        /// <summary>
        /// Returns true if CreateThreeDSSessionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateThreeDSSessionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateThreeDSSessionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                ) && 
                (
                    this.MethodUrl == input.MethodUrl ||
                    (this.MethodUrl != null &&
                    this.MethodUrl.Equals(input.MethodUrl))
                ) && 
                (
                    this.MethodNotificationUrl == input.MethodNotificationUrl ||
                    (this.MethodNotificationUrl != null &&
                    this.MethodNotificationUrl.Equals(input.MethodNotificationUrl))
                ) && 
                (
                    this.DirectoryServerId == input.DirectoryServerId ||
                    (this.DirectoryServerId != null &&
                    this.DirectoryServerId.Equals(input.DirectoryServerId))
                ) && 
                (
                    this.RecommendedVersion == input.RecommendedVersion ||
                    (this.RecommendedVersion != null &&
                    this.RecommendedVersion.Equals(input.RecommendedVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CardBrand != null)
                {
                    hashCode = (hashCode * 59) + this.CardBrand.GetHashCode();
                }
                if (this.MethodUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MethodUrl.GetHashCode();
                }
                if (this.MethodNotificationUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MethodNotificationUrl.GetHashCode();
                }
                if (this.DirectoryServerId != null)
                {
                    hashCode = (hashCode * 59) + this.DirectoryServerId.GetHashCode();
                }
                if (this.RecommendedVersion != null)
                {
                    hashCode = (hashCode * 59) + this.RecommendedVersion.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
