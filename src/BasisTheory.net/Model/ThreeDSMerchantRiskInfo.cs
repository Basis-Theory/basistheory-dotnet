/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// ThreeDSMerchantRiskInfo
    /// </summary>
    [DataContract(Name = "ThreeDSMerchantRiskInfo")]
    public partial class ThreeDSMerchantRiskInfo : IEquatable<ThreeDSMerchantRiskInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSMerchantRiskInfo" /> class.
        /// </summary>
        /// <param name="deliveryEmail">deliveryEmail.</param>
        /// <param name="deliveryTimeFrame">deliveryTimeFrame.</param>
        /// <param name="giftCardAmount">giftCardAmount.</param>
        /// <param name="giftCardCount">giftCardCount.</param>
        /// <param name="giftCardCurrency">giftCardCurrency.</param>
        /// <param name="preOrderPurchase">preOrderPurchase.</param>
        /// <param name="preOrderDate">preOrderDate.</param>
        /// <param name="reorderedPurchase">reorderedPurchase.</param>
        /// <param name="shippingMethod">shippingMethod.</param>
        public ThreeDSMerchantRiskInfo(string deliveryEmail = default(string), string deliveryTimeFrame = default(string), string giftCardAmount = default(string), string giftCardCount = default(string), string giftCardCurrency = default(string), bool? preOrderPurchase = default(bool?), string preOrderDate = default(string), bool? reorderedPurchase = default(bool?), string shippingMethod = default(string))
        {
            this.DeliveryEmail = deliveryEmail;
            this.DeliveryTimeFrame = deliveryTimeFrame;
            this.GiftCardAmount = giftCardAmount;
            this.GiftCardCount = giftCardCount;
            this.GiftCardCurrency = giftCardCurrency;
            this.PreOrderPurchase = preOrderPurchase;
            this.PreOrderDate = preOrderDate;
            this.ReorderedPurchase = reorderedPurchase;
            this.ShippingMethod = shippingMethod;
        }

        /// <summary>
        /// Gets or Sets DeliveryEmail
        /// </summary>
        [DataMember(Name = "delivery_email", EmitDefaultValue = true)]
        public string DeliveryEmail { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryTimeFrame
        /// </summary>
        [DataMember(Name = "delivery_time_frame", EmitDefaultValue = true)]
        public string DeliveryTimeFrame { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardAmount
        /// </summary>
        [DataMember(Name = "gift_card_amount", EmitDefaultValue = true)]
        public string GiftCardAmount { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardCount
        /// </summary>
        [DataMember(Name = "gift_card_count", EmitDefaultValue = true)]
        public string GiftCardCount { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardCurrency
        /// </summary>
        [DataMember(Name = "gift_card_currency", EmitDefaultValue = true)]
        public string GiftCardCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PreOrderPurchase
        /// </summary>
        [DataMember(Name = "pre_order_purchase", EmitDefaultValue = true)]
        public bool? PreOrderPurchase { get; set; }

        /// <summary>
        /// Gets or Sets PreOrderDate
        /// </summary>
        [DataMember(Name = "pre_order_date", EmitDefaultValue = true)]
        public string PreOrderDate { get; set; }

        /// <summary>
        /// Gets or Sets ReorderedPurchase
        /// </summary>
        [DataMember(Name = "reordered_purchase", EmitDefaultValue = true)]
        public bool? ReorderedPurchase { get; set; }

        /// <summary>
        /// Gets or Sets ShippingMethod
        /// </summary>
        [DataMember(Name = "shipping_method", EmitDefaultValue = true)]
        public string ShippingMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDSMerchantRiskInfo {\n");
            sb.Append("  DeliveryEmail: ").Append(DeliveryEmail).Append("\n");
            sb.Append("  DeliveryTimeFrame: ").Append(DeliveryTimeFrame).Append("\n");
            sb.Append("  GiftCardAmount: ").Append(GiftCardAmount).Append("\n");
            sb.Append("  GiftCardCount: ").Append(GiftCardCount).Append("\n");
            sb.Append("  GiftCardCurrency: ").Append(GiftCardCurrency).Append("\n");
            sb.Append("  PreOrderPurchase: ").Append(PreOrderPurchase).Append("\n");
            sb.Append("  PreOrderDate: ").Append(PreOrderDate).Append("\n");
            sb.Append("  ReorderedPurchase: ").Append(ReorderedPurchase).Append("\n");
            sb.Append("  ShippingMethod: ").Append(ShippingMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSMerchantRiskInfo);
        }

        /// <summary>
        /// Returns true if ThreeDSMerchantRiskInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSMerchantRiskInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSMerchantRiskInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeliveryEmail == input.DeliveryEmail ||
                    (this.DeliveryEmail != null &&
                    this.DeliveryEmail.Equals(input.DeliveryEmail))
                ) && 
                (
                    this.DeliveryTimeFrame == input.DeliveryTimeFrame ||
                    (this.DeliveryTimeFrame != null &&
                    this.DeliveryTimeFrame.Equals(input.DeliveryTimeFrame))
                ) && 
                (
                    this.GiftCardAmount == input.GiftCardAmount ||
                    (this.GiftCardAmount != null &&
                    this.GiftCardAmount.Equals(input.GiftCardAmount))
                ) && 
                (
                    this.GiftCardCount == input.GiftCardCount ||
                    (this.GiftCardCount != null &&
                    this.GiftCardCount.Equals(input.GiftCardCount))
                ) && 
                (
                    this.GiftCardCurrency == input.GiftCardCurrency ||
                    (this.GiftCardCurrency != null &&
                    this.GiftCardCurrency.Equals(input.GiftCardCurrency))
                ) && 
                (
                    this.PreOrderPurchase == input.PreOrderPurchase ||
                    (this.PreOrderPurchase != null &&
                    this.PreOrderPurchase.Equals(input.PreOrderPurchase))
                ) && 
                (
                    this.PreOrderDate == input.PreOrderDate ||
                    (this.PreOrderDate != null &&
                    this.PreOrderDate.Equals(input.PreOrderDate))
                ) && 
                (
                    this.ReorderedPurchase == input.ReorderedPurchase ||
                    (this.ReorderedPurchase != null &&
                    this.ReorderedPurchase.Equals(input.ReorderedPurchase))
                ) && 
                (
                    this.ShippingMethod == input.ShippingMethod ||
                    (this.ShippingMethod != null &&
                    this.ShippingMethod.Equals(input.ShippingMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryEmail != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryEmail.GetHashCode();
                }
                if (this.DeliveryTimeFrame != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryTimeFrame.GetHashCode();
                }
                if (this.GiftCardAmount != null)
                {
                    hashCode = (hashCode * 59) + this.GiftCardAmount.GetHashCode();
                }
                if (this.GiftCardCount != null)
                {
                    hashCode = (hashCode * 59) + this.GiftCardCount.GetHashCode();
                }
                if (this.GiftCardCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.GiftCardCurrency.GetHashCode();
                }
                if (this.PreOrderPurchase != null)
                {
                    hashCode = (hashCode * 59) + this.PreOrderPurchase.GetHashCode();
                }
                if (this.PreOrderDate != null)
                {
                    hashCode = (hashCode * 59) + this.PreOrderDate.GetHashCode();
                }
                if (this.ReorderedPurchase != null)
                {
                    hashCode = (hashCode * 59) + this.ReorderedPurchase.GetHashCode();
                }
                if (this.ShippingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingMethod.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
