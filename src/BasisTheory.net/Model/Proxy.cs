/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// Proxy
    /// </summary>
    [DataContract]
    public partial class Proxy :  IEquatable<Proxy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Proxy" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="key">key.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="name">name.</param>
        /// <param name="destinationUrl">destinationUrl.</param>
        /// <param name="requestReactorId">requestReactorId.</param>
        /// <param name="responseReactorId">responseReactorId.</param>
        /// <param name="requireAuth">requireAuth.</param>
        /// <param name="requestTransform">requestTransform.</param>
        /// <param name="responseTransform">responseTransform.</param>
        /// <param name="applicationId">applicationId.</param>
        /// <param name="configuration">configuration.</param>
        /// <param name="proxyHost">proxyHost.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="modifiedBy">modifiedBy.</param>
        /// <param name="modifiedAt">modifiedAt.</param>
        public Proxy(Guid id = default(Guid), string key = default(string), Guid tenantId = default(Guid), string name = default(string), string destinationUrl = default(string), Guid? requestReactorId = default(Guid?), Guid? responseReactorId = default(Guid?), bool requireAuth = default(bool), ProxyTransform requestTransform = default(ProxyTransform), ProxyTransform responseTransform = default(ProxyTransform), Guid? applicationId = default(Guid?), Dictionary<string, string> configuration = default(Dictionary<string, string>), string proxyHost = default(string), Guid? createdBy = default(Guid?), DateTime? createdAt = default(DateTime?), Guid? modifiedBy = default(Guid?), DateTime? modifiedAt = default(DateTime?))
        {
            this.Key = key;
            this.Name = name;
            this.DestinationUrl = destinationUrl;
            this.RequestReactorId = requestReactorId;
            this.ResponseReactorId = responseReactorId;
            this.ApplicationId = applicationId;
            this._Configuration = configuration;
            this.ProxyHost = proxyHost;
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt;
            this.ModifiedBy = modifiedBy;
            this.ModifiedAt = modifiedAt;
            this.Id = id;
            this.Key = key;
            this.TenantId = tenantId;
            this.Name = name;
            this.DestinationUrl = destinationUrl;
            this.RequestReactorId = requestReactorId;
            this.ResponseReactorId = responseReactorId;
            this.RequireAuth = requireAuth;
            this.RequestTransform = requestTransform;
            this.ResponseTransform = responseTransform;
            this.ApplicationId = applicationId;
            this._Configuration = configuration;
            this.ProxyHost = proxyHost;
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt;
            this.ModifiedBy = modifiedBy;
            this.ModifiedAt = modifiedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenant_id", EmitDefaultValue=false)]
        public Guid TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DestinationUrl
        /// </summary>
        [DataMember(Name="destination_url", EmitDefaultValue=true)]
        public string DestinationUrl { get; set; }

        /// <summary>
        /// Gets or Sets RequestReactorId
        /// </summary>
        [DataMember(Name="request_reactor_id", EmitDefaultValue=true)]
        public Guid? RequestReactorId { get; set; }

        /// <summary>
        /// Gets or Sets ResponseReactorId
        /// </summary>
        [DataMember(Name="response_reactor_id", EmitDefaultValue=true)]
        public Guid? ResponseReactorId { get; set; }

        /// <summary>
        /// Gets or Sets RequireAuth
        /// </summary>
        [DataMember(Name="require_auth", EmitDefaultValue=false)]
        public bool RequireAuth { get; set; }

        /// <summary>
        /// Gets or Sets RequestTransform
        /// </summary>
        [DataMember(Name="request_transform", EmitDefaultValue=false)]
        public ProxyTransform RequestTransform { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTransform
        /// </summary>
        [DataMember(Name="response_transform", EmitDefaultValue=false)]
        public ProxyTransform ResponseTransform { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name="application_id", EmitDefaultValue=true)]
        public Guid? ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets _Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=true)]
        public Dictionary<string, string> _Configuration { get; set; }

        /// <summary>
        /// Gets or Sets ProxyHost
        /// </summary>
        [DataMember(Name="proxy_host", EmitDefaultValue=true)]
        public string ProxyHost { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=true)]
        public Guid? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedBy
        /// </summary>
        [DataMember(Name="modified_by", EmitDefaultValue=true)]
        public Guid? ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedAt
        /// </summary>
        [DataMember(Name="modified_at", EmitDefaultValue=true)]
        public DateTime? ModifiedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Proxy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DestinationUrl: ").Append(DestinationUrl).Append("\n");
            sb.Append("  RequestReactorId: ").Append(RequestReactorId).Append("\n");
            sb.Append("  ResponseReactorId: ").Append(ResponseReactorId).Append("\n");
            sb.Append("  RequireAuth: ").Append(RequireAuth).Append("\n");
            sb.Append("  RequestTransform: ").Append(RequestTransform).Append("\n");
            sb.Append("  ResponseTransform: ").Append(ResponseTransform).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  _Configuration: ").Append(_Configuration).Append("\n");
            sb.Append("  ProxyHost: ").Append(ProxyHost).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Proxy);
        }

        /// <summary>
        /// Returns true if Proxy instances are equal
        /// </summary>
        /// <param name="input">Instance of Proxy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Proxy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DestinationUrl == input.DestinationUrl ||
                    (this.DestinationUrl != null &&
                    this.DestinationUrl.Equals(input.DestinationUrl))
                ) && 
                (
                    this.RequestReactorId == input.RequestReactorId ||
                    (this.RequestReactorId != null &&
                    this.RequestReactorId.Equals(input.RequestReactorId))
                ) && 
                (
                    this.ResponseReactorId == input.ResponseReactorId ||
                    (this.ResponseReactorId != null &&
                    this.ResponseReactorId.Equals(input.ResponseReactorId))
                ) && 
                (
                    this.RequireAuth == input.RequireAuth ||
                    (this.RequireAuth != null &&
                    this.RequireAuth.Equals(input.RequireAuth))
                ) && 
                (
                    this.RequestTransform == input.RequestTransform ||
                    (this.RequestTransform != null &&
                    this.RequestTransform.Equals(input.RequestTransform))
                ) && 
                (
                    this.ResponseTransform == input.ResponseTransform ||
                    (this.ResponseTransform != null &&
                    this.ResponseTransform.Equals(input.ResponseTransform))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this._Configuration == input._Configuration ||
                    this._Configuration != null &&
                    input._Configuration != null &&
                    this._Configuration.SequenceEqual(input._Configuration)
                ) && 
                (
                    this.ProxyHost == input.ProxyHost ||
                    (this.ProxyHost != null &&
                    this.ProxyHost.Equals(input.ProxyHost))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    (this.ModifiedBy != null &&
                    this.ModifiedBy.Equals(input.ModifiedBy))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DestinationUrl != null)
                    hashCode = hashCode * 59 + this.DestinationUrl.GetHashCode();
                if (this.RequestReactorId != null)
                    hashCode = hashCode * 59 + this.RequestReactorId.GetHashCode();
                if (this.ResponseReactorId != null)
                    hashCode = hashCode * 59 + this.ResponseReactorId.GetHashCode();
                if (this.RequireAuth != null)
                    hashCode = hashCode * 59 + this.RequireAuth.GetHashCode();
                if (this.RequestTransform != null)
                    hashCode = hashCode * 59 + this.RequestTransform.GetHashCode();
                if (this.ResponseTransform != null)
                    hashCode = hashCode * 59 + this.ResponseTransform.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this._Configuration != null)
                    hashCode = hashCode * 59 + this._Configuration.GetHashCode();
                if (this.ProxyHost != null)
                    hashCode = hashCode * 59 + this.ProxyHost.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ModifiedBy != null)
                    hashCode = hashCode * 59 + this.ModifiedBy.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (Guid) maxLength
            if(this.Id != null && this.Id.ToString().Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 36.", new [] { "Id" });
            }


            // Id (Guid) pattern
            Regex regexId = new Regex(@"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // Key (string) maxLength
            if(this.Key != null && this.Key.ToString().Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, length must be less than 100.", new [] { "Key" });
            }


            // Key (string) pattern
            Regex regexKey = new Regex(@"^[A-z0-9]+$", RegexOptions.CultureInvariant);
            if (false == regexKey.Match(this.Key.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, must match a pattern of " + regexKey, new [] { "Key" });
            }

            // TenantId (Guid) maxLength
            if(this.TenantId != null && this.TenantId.ToString().Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TenantId, length must be less than 36.", new [] { "TenantId" });
            }


            // TenantId (Guid) pattern
            Regex regexTenantId = new Regex(@"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", RegexOptions.CultureInvariant);
            if (false == regexTenantId.Match(this.TenantId.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TenantId, must match a pattern of " + regexTenantId, new [] { "TenantId" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.ToString().Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }


            // Name (string) pattern
            Regex regexName = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            // DestinationUrl (string) maxLength
            if(this.DestinationUrl != null && this.DestinationUrl.ToString().Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DestinationUrl, length must be less than 400.", new [] { "DestinationUrl" });
            }


            // DestinationUrl (string) pattern
            Regex regexDestinationUrl = new Regex(@"^https:\/\/.+$", RegexOptions.CultureInvariant);
            if (false == regexDestinationUrl.Match(this.DestinationUrl.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DestinationUrl, must match a pattern of " + regexDestinationUrl, new [] { "DestinationUrl" });
            }

            // RequestReactorId (Guid?) maxLength
            if(this.RequestReactorId != null && this.RequestReactorId.ToString().Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestReactorId, length must be less than 36.", new [] { "RequestReactorId" });
            }


            // RequestReactorId (Guid?) pattern
            Regex regexRequestReactorId = new Regex(@"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", RegexOptions.CultureInvariant);
            if (false == regexRequestReactorId.Match(this.RequestReactorId.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestReactorId, must match a pattern of " + regexRequestReactorId, new [] { "RequestReactorId" });
            }

            // ResponseReactorId (Guid?) maxLength
            if(this.ResponseReactorId != null && this.ResponseReactorId.ToString().Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReactorId, length must be less than 36.", new [] { "ResponseReactorId" });
            }


            // ResponseReactorId (Guid?) pattern
            Regex regexResponseReactorId = new Regex(@"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", RegexOptions.CultureInvariant);
            if (false == regexResponseReactorId.Match(this.ResponseReactorId.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseReactorId, must match a pattern of " + regexResponseReactorId, new [] { "ResponseReactorId" });
            }

            // ApplicationId (Guid?) maxLength
            if(this.ApplicationId != null && this.ApplicationId.ToString().Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationId, length must be less than 36.", new [] { "ApplicationId" });
            }


            // ApplicationId (Guid?) pattern
            Regex regexApplicationId = new Regex(@"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", RegexOptions.CultureInvariant);
            if (false == regexApplicationId.Match(this.ApplicationId.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationId, must match a pattern of " + regexApplicationId, new [] { "ApplicationId" });
            }

            // CreatedBy (Guid?) maxLength
            if(this.CreatedBy != null && this.CreatedBy.ToString().Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedBy, length must be less than 36.", new [] { "CreatedBy" });
            }


            // CreatedBy (Guid?) pattern
            Regex regexCreatedBy = new Regex(@"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", RegexOptions.CultureInvariant);
            if (false == regexCreatedBy.Match(this.CreatedBy.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedBy, must match a pattern of " + regexCreatedBy, new [] { "CreatedBy" });
            }

            // CreatedAt (DateTime?) maxLength
            if(this.CreatedAt != null && this.CreatedAt.ToString().Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedAt, length must be less than 40.", new [] { "CreatedAt" });
            }


            // ModifiedBy (Guid?) maxLength
            if(this.ModifiedBy != null && this.ModifiedBy.ToString().Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedBy, length must be less than 36.", new [] { "ModifiedBy" });
            }


            // ModifiedBy (Guid?) pattern
            Regex regexModifiedBy = new Regex(@"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", RegexOptions.CultureInvariant);
            if (false == regexModifiedBy.Match(this.ModifiedBy.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedBy, must match a pattern of " + regexModifiedBy, new [] { "ModifiedBy" });
            }

            // ModifiedAt (DateTime?) maxLength
            if(this.ModifiedAt != null && this.ModifiedAt.ToString().Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedAt, length must be less than 40.", new [] { "ModifiedAt" });
            }


            yield break;
        }
    }

}
