/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// PatchProxyRequest
    /// </summary>
    [DataContract]
    public partial class PatchProxyRequest :  IEquatable<PatchProxyRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchProxyRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="destinationUrl">destinationUrl.</param>
        /// <param name="requestTransform">requestTransform.</param>
        /// <param name="responseTransform">responseTransform.</param>
        /// <param name="application">application.</param>
        /// <param name="configuration">configuration.</param>
        /// <param name="requireAuth">requireAuth.</param>
        public PatchProxyRequest(string name = default(string), string destinationUrl = default(string), ProxyTransform requestTransform = default(ProxyTransform), ProxyTransform responseTransform = default(ProxyTransform), Application application = default(Application), Dictionary<string, string> configuration = default(Dictionary<string, string>), bool? requireAuth = default(bool?))
        {
            this.Name = name;
            this.DestinationUrl = destinationUrl;
            this._Configuration = configuration;
            this.RequireAuth = requireAuth;
            this.Name = name;
            this.DestinationUrl = destinationUrl;
            this.RequestTransform = requestTransform;
            this.ResponseTransform = responseTransform;
            this.Application = application;
            this._Configuration = configuration;
            this.RequireAuth = requireAuth;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DestinationUrl
        /// </summary>
        [DataMember(Name="destination_url", EmitDefaultValue=true)]
        public string DestinationUrl { get; set; }

        /// <summary>
        /// Gets or Sets RequestTransform
        /// </summary>
        [DataMember(Name="request_transform", EmitDefaultValue=false)]
        public ProxyTransform RequestTransform { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTransform
        /// </summary>
        [DataMember(Name="response_transform", EmitDefaultValue=false)]
        public ProxyTransform ResponseTransform { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public Application Application { get; set; }

        /// <summary>
        /// Gets or Sets _Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=true)]
        public Dictionary<string, string> _Configuration { get; set; }

        /// <summary>
        /// Gets or Sets RequireAuth
        /// </summary>
        [DataMember(Name="require_auth", EmitDefaultValue=true)]
        public bool? RequireAuth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatchProxyRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DestinationUrl: ").Append(DestinationUrl).Append("\n");
            sb.Append("  RequestTransform: ").Append(RequestTransform).Append("\n");
            sb.Append("  ResponseTransform: ").Append(ResponseTransform).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  _Configuration: ").Append(_Configuration).Append("\n");
            sb.Append("  RequireAuth: ").Append(RequireAuth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchProxyRequest);
        }

        /// <summary>
        /// Returns true if PatchProxyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchProxyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchProxyRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DestinationUrl == input.DestinationUrl ||
                    (this.DestinationUrl != null &&
                    this.DestinationUrl.Equals(input.DestinationUrl))
                ) && 
                (
                    this.RequestTransform == input.RequestTransform ||
                    (this.RequestTransform != null &&
                    this.RequestTransform.Equals(input.RequestTransform))
                ) && 
                (
                    this.ResponseTransform == input.ResponseTransform ||
                    (this.ResponseTransform != null &&
                    this.ResponseTransform.Equals(input.ResponseTransform))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this._Configuration == input._Configuration ||
                    this._Configuration != null &&
                    input._Configuration != null &&
                    this._Configuration.SequenceEqual(input._Configuration)
                ) && 
                (
                    this.RequireAuth == input.RequireAuth ||
                    (this.RequireAuth != null &&
                    this.RequireAuth.Equals(input.RequireAuth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DestinationUrl != null)
                    hashCode = hashCode * 59 + this.DestinationUrl.GetHashCode();
                if (this.RequestTransform != null)
                    hashCode = hashCode * 59 + this.RequestTransform.GetHashCode();
                if (this.ResponseTransform != null)
                    hashCode = hashCode * 59 + this.ResponseTransform.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this._Configuration != null)
                    hashCode = hashCode * 59 + this._Configuration.GetHashCode();
                if (this.RequireAuth != null)
                    hashCode = hashCode * 59 + this.RequireAuth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.ToString().Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }


            // Name (string) pattern
            Regex regexName = new Regex(@"^.+$", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }



            yield break;
        }
    }

}
