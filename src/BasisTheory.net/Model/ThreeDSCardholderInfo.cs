/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// ThreeDSCardholderInfo
    /// </summary>
    [DataContract(Name = "ThreeDSCardholderInfo")]
    public partial class ThreeDSCardholderInfo : IEquatable<ThreeDSCardholderInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSCardholderInfo" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="accountInfo">accountInfo.</param>
        /// <param name="authenticationInfo">authenticationInfo.</param>
        /// <param name="priorAuthenticationInfo">priorAuthenticationInfo.</param>
        /// <param name="name">name.</param>
        /// <param name="email">email.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="mobilePhoneNumber">mobilePhoneNumber.</param>
        /// <param name="workPhoneNumber">workPhoneNumber.</param>
        /// <param name="billingShippingAddressMatch">billingShippingAddressMatch.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        public ThreeDSCardholderInfo(string accountId = default(string), string accountType = default(string), ThreeDSCardholderAccountInfo accountInfo = default(ThreeDSCardholderAccountInfo), ThreeDSCardholderAuthenticationInfo authenticationInfo = default(ThreeDSCardholderAuthenticationInfo), ThreeDSPriorAuthenticationInfo priorAuthenticationInfo = default(ThreeDSPriorAuthenticationInfo), string name = default(string), string email = default(string), ThreeDSCardholderPhoneNumber phoneNumber = default(ThreeDSCardholderPhoneNumber), ThreeDSCardholderPhoneNumber mobilePhoneNumber = default(ThreeDSCardholderPhoneNumber), ThreeDSCardholderPhoneNumber workPhoneNumber = default(ThreeDSCardholderPhoneNumber), string billingShippingAddressMatch = default(string), ThreeDSAddress billingAddress = default(ThreeDSAddress), ThreeDSAddress shippingAddress = default(ThreeDSAddress))
        {
            this.AccountId = accountId;
            this.AccountType = accountType;
            this.AccountInfo = accountInfo;
            this.AuthenticationInfo = authenticationInfo;
            this.PriorAuthenticationInfo = priorAuthenticationInfo;
            this.Name = name;
            this.Email = email;
            this.PhoneNumber = phoneNumber;
            this.MobilePhoneNumber = mobilePhoneNumber;
            this.WorkPhoneNumber = workPhoneNumber;
            this.BillingShippingAddressMatch = billingShippingAddressMatch;
            this.BillingAddress = billingAddress;
            this.ShippingAddress = shippingAddress;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "account_id", EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "account_type", EmitDefaultValue = true)]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or Sets AccountInfo
        /// </summary>
        [DataMember(Name = "account_info", EmitDefaultValue = false)]
        public ThreeDSCardholderAccountInfo AccountInfo { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationInfo
        /// </summary>
        [DataMember(Name = "authentication_info", EmitDefaultValue = false)]
        public ThreeDSCardholderAuthenticationInfo AuthenticationInfo { get; set; }

        /// <summary>
        /// Gets or Sets PriorAuthenticationInfo
        /// </summary>
        [DataMember(Name = "prior_authentication_info", EmitDefaultValue = false)]
        public ThreeDSPriorAuthenticationInfo PriorAuthenticationInfo { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phone_number", EmitDefaultValue = false)]
        public ThreeDSCardholderPhoneNumber PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets MobilePhoneNumber
        /// </summary>
        [DataMember(Name = "mobile_phone_number", EmitDefaultValue = false)]
        public ThreeDSCardholderPhoneNumber MobilePhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets WorkPhoneNumber
        /// </summary>
        [DataMember(Name = "work_phone_number", EmitDefaultValue = false)]
        public ThreeDSCardholderPhoneNumber WorkPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets BillingShippingAddressMatch
        /// </summary>
        [DataMember(Name = "billing_shipping_address_match", EmitDefaultValue = true)]
        public string BillingShippingAddressMatch { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billing_address", EmitDefaultValue = false)]
        public ThreeDSAddress BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shipping_address", EmitDefaultValue = false)]
        public ThreeDSAddress ShippingAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDSCardholderInfo {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountInfo: ").Append(AccountInfo).Append("\n");
            sb.Append("  AuthenticationInfo: ").Append(AuthenticationInfo).Append("\n");
            sb.Append("  PriorAuthenticationInfo: ").Append(PriorAuthenticationInfo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  MobilePhoneNumber: ").Append(MobilePhoneNumber).Append("\n");
            sb.Append("  WorkPhoneNumber: ").Append(WorkPhoneNumber).Append("\n");
            sb.Append("  BillingShippingAddressMatch: ").Append(BillingShippingAddressMatch).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSCardholderInfo);
        }

        /// <summary>
        /// Returns true if ThreeDSCardholderInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSCardholderInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSCardholderInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountInfo == input.AccountInfo ||
                    (this.AccountInfo != null &&
                    this.AccountInfo.Equals(input.AccountInfo))
                ) && 
                (
                    this.AuthenticationInfo == input.AuthenticationInfo ||
                    (this.AuthenticationInfo != null &&
                    this.AuthenticationInfo.Equals(input.AuthenticationInfo))
                ) && 
                (
                    this.PriorAuthenticationInfo == input.PriorAuthenticationInfo ||
                    (this.PriorAuthenticationInfo != null &&
                    this.PriorAuthenticationInfo.Equals(input.PriorAuthenticationInfo))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.MobilePhoneNumber == input.MobilePhoneNumber ||
                    (this.MobilePhoneNumber != null &&
                    this.MobilePhoneNumber.Equals(input.MobilePhoneNumber))
                ) && 
                (
                    this.WorkPhoneNumber == input.WorkPhoneNumber ||
                    (this.WorkPhoneNumber != null &&
                    this.WorkPhoneNumber.Equals(input.WorkPhoneNumber))
                ) && 
                (
                    this.BillingShippingAddressMatch == input.BillingShippingAddressMatch ||
                    (this.BillingShippingAddressMatch != null &&
                    this.BillingShippingAddressMatch.Equals(input.BillingShippingAddressMatch))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                if (this.AccountInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AccountInfo.GetHashCode();
                }
                if (this.AuthenticationInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationInfo.GetHashCode();
                }
                if (this.PriorAuthenticationInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PriorAuthenticationInfo.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.MobilePhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MobilePhoneNumber.GetHashCode();
                }
                if (this.WorkPhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.WorkPhoneNumber.GetHashCode();
                }
                if (this.BillingShippingAddressMatch != null)
                {
                    hashCode = (hashCode * 59) + this.BillingShippingAddressMatch.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.ShippingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingAddress.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
