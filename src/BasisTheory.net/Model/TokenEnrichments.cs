/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// TokenEnrichments
    /// </summary>
    [DataContract(Name = "TokenEnrichments")]
    public partial class TokenEnrichments : IEquatable<TokenEnrichments>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEnrichments" /> class.
        /// </summary>
        /// <param name="binDetails">binDetails.</param>
        /// <param name="cardDetails">cardDetails.</param>
        public TokenEnrichments(BinDetails binDetails = default(BinDetails), CardDetails cardDetails = default(CardDetails))
        {
            this.BinDetails = binDetails;
            this.CardDetails = cardDetails;
        }

        /// <summary>
        /// Gets or Sets BinDetails
        /// </summary>
        [DataMember(Name = "bin_details", EmitDefaultValue = false)]
        public BinDetails BinDetails { get; set; }

        /// <summary>
        /// Gets or Sets CardDetails
        /// </summary>
        [DataMember(Name = "card_details", EmitDefaultValue = false)]
        public CardDetails CardDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenEnrichments {\n");
            sb.Append("  BinDetails: ").Append(BinDetails).Append("\n");
            sb.Append("  CardDetails: ").Append(CardDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenEnrichments);
        }

        /// <summary>
        /// Returns true if TokenEnrichments instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenEnrichments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenEnrichments input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BinDetails == input.BinDetails ||
                    (this.BinDetails != null &&
                    this.BinDetails.Equals(input.BinDetails))
                ) && 
                (
                    this.CardDetails == input.CardDetails ||
                    (this.CardDetails != null &&
                    this.CardDetails.Equals(input.CardDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BinDetails != null)
                {
                    hashCode = (hashCode * 59) + this.BinDetails.GetHashCode();
                }
                if (this.CardDetails != null)
                {
                    hashCode = (hashCode * 59) + this.CardDetails.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
