/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// BinDetails
    /// </summary>
    [DataContract(Name = "BinDetails")]
    public partial class BinDetails : IEquatable<BinDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinDetails" /> class.
        /// </summary>
        /// <param name="cardBrand">cardBrand.</param>
        /// <param name="type">type.</param>
        /// <param name="prepaid">prepaid.</param>
        /// <param name="cardSegmentType">cardSegmentType.</param>
        /// <param name="bank">bank.</param>
        /// <param name="product">product.</param>
        /// <param name="country">country.</param>
        /// <param name="reloadable">reloadable.</param>
        /// <param name="panOrToken">panOrToken.</param>
        /// <param name="accountUpdater">accountUpdater.</param>
        /// <param name="alm">alm.</param>
        /// <param name="domesticOnly">domesticOnly.</param>
        /// <param name="gamblingBlocked">gamblingBlocked.</param>
        /// <param name="level2">level2.</param>
        /// <param name="level3">level3.</param>
        /// <param name="issuerCurrency">issuerCurrency.</param>
        /// <param name="comboCard">comboCard.</param>
        /// <param name="binLength">binLength.</param>
        /// <param name="authentication">authentication.</param>
        /// <param name="cost">cost.</param>
        public BinDetails(string cardBrand = default(string), string type = default(string), bool? prepaid = default(bool?), string cardSegmentType = default(string), BinDetailsBank bank = default(BinDetailsBank), BinDetailsProduct product = default(BinDetailsProduct), BinDetailsCountry country = default(BinDetailsCountry), bool? reloadable = default(bool?), string panOrToken = default(string), bool? accountUpdater = default(bool?), bool? alm = default(bool?), bool? domesticOnly = default(bool?), bool? gamblingBlocked = default(bool?), bool? level2 = default(bool?), bool? level3 = default(bool?), string issuerCurrency = default(string), string comboCard = default(string), int? binLength = default(int?), Object authentication = default(Object), Object cost = default(Object))
        {
            this.CardBrand = cardBrand;
            this.Type = type;
            this.Prepaid = prepaid;
            this.CardSegmentType = cardSegmentType;
            this.Bank = bank;
            this.Product = product;
            this.Country = country;
            this.Reloadable = reloadable;
            this.PanOrToken = panOrToken;
            this.AccountUpdater = accountUpdater;
            this.Alm = alm;
            this.DomesticOnly = domesticOnly;
            this.GamblingBlocked = gamblingBlocked;
            this.Level2 = level2;
            this.Level3 = level3;
            this.IssuerCurrency = issuerCurrency;
            this.ComboCard = comboCard;
            this.BinLength = binLength;
            this.Authentication = authentication;
            this.Cost = cost;
        }

        /// <summary>
        /// Gets or Sets CardBrand
        /// </summary>
        [DataMember(Name = "card_brand", EmitDefaultValue = true)]
        public string CardBrand { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Prepaid
        /// </summary>
        [DataMember(Name = "prepaid", EmitDefaultValue = true)]
        public bool? Prepaid { get; set; }

        /// <summary>
        /// Gets or Sets CardSegmentType
        /// </summary>
        [DataMember(Name = "card_segment_type", EmitDefaultValue = true)]
        public string CardSegmentType { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name = "bank", EmitDefaultValue = false)]
        public BinDetailsBank Bank { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        public BinDetailsProduct Product { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public BinDetailsCountry Country { get; set; }

        /// <summary>
        /// Gets or Sets Reloadable
        /// </summary>
        [DataMember(Name = "reloadable", EmitDefaultValue = true)]
        public bool? Reloadable { get; set; }

        /// <summary>
        /// Gets or Sets PanOrToken
        /// </summary>
        [DataMember(Name = "pan_or_token", EmitDefaultValue = true)]
        public string PanOrToken { get; set; }

        /// <summary>
        /// Gets or Sets AccountUpdater
        /// </summary>
        [DataMember(Name = "account_updater", EmitDefaultValue = true)]
        public bool? AccountUpdater { get; set; }

        /// <summary>
        /// Gets or Sets Alm
        /// </summary>
        [DataMember(Name = "alm", EmitDefaultValue = true)]
        public bool? Alm { get; set; }

        /// <summary>
        /// Gets or Sets DomesticOnly
        /// </summary>
        [DataMember(Name = "domestic_only", EmitDefaultValue = true)]
        public bool? DomesticOnly { get; set; }

        /// <summary>
        /// Gets or Sets GamblingBlocked
        /// </summary>
        [DataMember(Name = "gambling_blocked", EmitDefaultValue = true)]
        public bool? GamblingBlocked { get; set; }

        /// <summary>
        /// Gets or Sets Level2
        /// </summary>
        [DataMember(Name = "level2", EmitDefaultValue = true)]
        public bool? Level2 { get; set; }

        /// <summary>
        /// Gets or Sets Level3
        /// </summary>
        [DataMember(Name = "level3", EmitDefaultValue = true)]
        public bool? Level3 { get; set; }

        /// <summary>
        /// Gets or Sets IssuerCurrency
        /// </summary>
        [DataMember(Name = "issuer_currency", EmitDefaultValue = true)]
        public string IssuerCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ComboCard
        /// </summary>
        [DataMember(Name = "combo_card", EmitDefaultValue = true)]
        public string ComboCard { get; set; }

        /// <summary>
        /// Gets or Sets BinLength
        /// </summary>
        [DataMember(Name = "bin_length", EmitDefaultValue = true)]
        public int? BinLength { get; set; }

        /// <summary>
        /// Gets or Sets Authentication
        /// </summary>
        [DataMember(Name = "authentication", EmitDefaultValue = true)]
        public Object Authentication { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name = "cost", EmitDefaultValue = true)]
        public Object Cost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BinDetails {\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Prepaid: ").Append(Prepaid).Append("\n");
            sb.Append("  CardSegmentType: ").Append(CardSegmentType).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Reloadable: ").Append(Reloadable).Append("\n");
            sb.Append("  PanOrToken: ").Append(PanOrToken).Append("\n");
            sb.Append("  AccountUpdater: ").Append(AccountUpdater).Append("\n");
            sb.Append("  Alm: ").Append(Alm).Append("\n");
            sb.Append("  DomesticOnly: ").Append(DomesticOnly).Append("\n");
            sb.Append("  GamblingBlocked: ").Append(GamblingBlocked).Append("\n");
            sb.Append("  Level2: ").Append(Level2).Append("\n");
            sb.Append("  Level3: ").Append(Level3).Append("\n");
            sb.Append("  IssuerCurrency: ").Append(IssuerCurrency).Append("\n");
            sb.Append("  ComboCard: ").Append(ComboCard).Append("\n");
            sb.Append("  BinLength: ").Append(BinLength).Append("\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BinDetails);
        }

        /// <summary>
        /// Returns true if BinDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BinDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Prepaid == input.Prepaid ||
                    (this.Prepaid != null &&
                    this.Prepaid.Equals(input.Prepaid))
                ) && 
                (
                    this.CardSegmentType == input.CardSegmentType ||
                    (this.CardSegmentType != null &&
                    this.CardSegmentType.Equals(input.CardSegmentType))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Reloadable == input.Reloadable ||
                    (this.Reloadable != null &&
                    this.Reloadable.Equals(input.Reloadable))
                ) && 
                (
                    this.PanOrToken == input.PanOrToken ||
                    (this.PanOrToken != null &&
                    this.PanOrToken.Equals(input.PanOrToken))
                ) && 
                (
                    this.AccountUpdater == input.AccountUpdater ||
                    (this.AccountUpdater != null &&
                    this.AccountUpdater.Equals(input.AccountUpdater))
                ) && 
                (
                    this.Alm == input.Alm ||
                    (this.Alm != null &&
                    this.Alm.Equals(input.Alm))
                ) && 
                (
                    this.DomesticOnly == input.DomesticOnly ||
                    (this.DomesticOnly != null &&
                    this.DomesticOnly.Equals(input.DomesticOnly))
                ) && 
                (
                    this.GamblingBlocked == input.GamblingBlocked ||
                    (this.GamblingBlocked != null &&
                    this.GamblingBlocked.Equals(input.GamblingBlocked))
                ) && 
                (
                    this.Level2 == input.Level2 ||
                    (this.Level2 != null &&
                    this.Level2.Equals(input.Level2))
                ) && 
                (
                    this.Level3 == input.Level3 ||
                    (this.Level3 != null &&
                    this.Level3.Equals(input.Level3))
                ) && 
                (
                    this.IssuerCurrency == input.IssuerCurrency ||
                    (this.IssuerCurrency != null &&
                    this.IssuerCurrency.Equals(input.IssuerCurrency))
                ) && 
                (
                    this.ComboCard == input.ComboCard ||
                    (this.ComboCard != null &&
                    this.ComboCard.Equals(input.ComboCard))
                ) && 
                (
                    this.BinLength == input.BinLength ||
                    (this.BinLength != null &&
                    this.BinLength.Equals(input.BinLength))
                ) && 
                (
                    this.Authentication == input.Authentication ||
                    (this.Authentication != null &&
                    this.Authentication.Equals(input.Authentication))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardBrand != null)
                {
                    hashCode = (hashCode * 59) + this.CardBrand.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Prepaid != null)
                {
                    hashCode = (hashCode * 59) + this.Prepaid.GetHashCode();
                }
                if (this.CardSegmentType != null)
                {
                    hashCode = (hashCode * 59) + this.CardSegmentType.GetHashCode();
                }
                if (this.Bank != null)
                {
                    hashCode = (hashCode * 59) + this.Bank.GetHashCode();
                }
                if (this.Product != null)
                {
                    hashCode = (hashCode * 59) + this.Product.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Reloadable != null)
                {
                    hashCode = (hashCode * 59) + this.Reloadable.GetHashCode();
                }
                if (this.PanOrToken != null)
                {
                    hashCode = (hashCode * 59) + this.PanOrToken.GetHashCode();
                }
                if (this.AccountUpdater != null)
                {
                    hashCode = (hashCode * 59) + this.AccountUpdater.GetHashCode();
                }
                if (this.Alm != null)
                {
                    hashCode = (hashCode * 59) + this.Alm.GetHashCode();
                }
                if (this.DomesticOnly != null)
                {
                    hashCode = (hashCode * 59) + this.DomesticOnly.GetHashCode();
                }
                if (this.GamblingBlocked != null)
                {
                    hashCode = (hashCode * 59) + this.GamblingBlocked.GetHashCode();
                }
                if (this.Level2 != null)
                {
                    hashCode = (hashCode * 59) + this.Level2.GetHashCode();
                }
                if (this.Level3 != null)
                {
                    hashCode = (hashCode * 59) + this.Level3.GetHashCode();
                }
                if (this.IssuerCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerCurrency.GetHashCode();
                }
                if (this.ComboCard != null)
                {
                    hashCode = (hashCode * 59) + this.ComboCard.GetHashCode();
                }
                if (this.BinLength != null)
                {
                    hashCode = (hashCode * 59) + this.BinLength.GetHashCode();
                }
                if (this.Authentication != null)
                {
                    hashCode = (hashCode * 59) + this.Authentication.GetHashCode();
                }
                if (this.Cost != null)
                {
                    hashCode = (hashCode * 59) + this.Cost.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
