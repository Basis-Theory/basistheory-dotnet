/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// ThreeDSDeviceInfo
    /// </summary>
    [DataContract]
    public partial class ThreeDSDeviceInfo :  IEquatable<ThreeDSDeviceInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSDeviceInfo" /> class.
        /// </summary>
        /// <param name="browserAcceptHeader">browserAcceptHeader.</param>
        /// <param name="browserIp">browserIp.</param>
        /// <param name="browserJavascriptEnabled">browserJavascriptEnabled.</param>
        /// <param name="browserJavaEnabled">browserJavaEnabled.</param>
        /// <param name="browserLanguage">browserLanguage.</param>
        /// <param name="browserColorDepth">browserColorDepth.</param>
        /// <param name="browserScreenHeight">browserScreenHeight.</param>
        /// <param name="browserScreenWidth">browserScreenWidth.</param>
        /// <param name="browserTz">browserTz.</param>
        /// <param name="browserUserAgent">browserUserAgent.</param>
        /// <param name="sdkTransactionId">sdkTransactionId.</param>
        /// <param name="sdkApplicationId">sdkApplicationId.</param>
        /// <param name="sdkEncryptionData">sdkEncryptionData.</param>
        /// <param name="sdkEphemeralPublicKey">sdkEphemeralPublicKey.</param>
        /// <param name="sdkMaxTimeout">sdkMaxTimeout.</param>
        /// <param name="sdkReferenceNumber">sdkReferenceNumber.</param>
        /// <param name="sdkRenderOptions">sdkRenderOptions.</param>
        public ThreeDSDeviceInfo(string browserAcceptHeader = default(string), string browserIp = default(string), bool? browserJavascriptEnabled = default(bool?), bool? browserJavaEnabled = default(bool?), string browserLanguage = default(string), string browserColorDepth = default(string), string browserScreenHeight = default(string), string browserScreenWidth = default(string), string browserTz = default(string), string browserUserAgent = default(string), string sdkTransactionId = default(string), string sdkApplicationId = default(string), string sdkEncryptionData = default(string), string sdkEphemeralPublicKey = default(string), string sdkMaxTimeout = default(string), string sdkReferenceNumber = default(string), ThreeDSMobileSdkRenderOptions sdkRenderOptions = default(ThreeDSMobileSdkRenderOptions))
        {
            this.BrowserAcceptHeader = browserAcceptHeader;
            this.BrowserIp = browserIp;
            this.BrowserJavascriptEnabled = browserJavascriptEnabled;
            this.BrowserJavaEnabled = browserJavaEnabled;
            this.BrowserLanguage = browserLanguage;
            this.BrowserColorDepth = browserColorDepth;
            this.BrowserScreenHeight = browserScreenHeight;
            this.BrowserScreenWidth = browserScreenWidth;
            this.BrowserTz = browserTz;
            this.BrowserUserAgent = browserUserAgent;
            this.SdkTransactionId = sdkTransactionId;
            this.SdkApplicationId = sdkApplicationId;
            this.SdkEncryptionData = sdkEncryptionData;
            this.SdkEphemeralPublicKey = sdkEphemeralPublicKey;
            this.SdkMaxTimeout = sdkMaxTimeout;
            this.SdkReferenceNumber = sdkReferenceNumber;
            this.BrowserAcceptHeader = browserAcceptHeader;
            this.BrowserIp = browserIp;
            this.BrowserJavascriptEnabled = browserJavascriptEnabled;
            this.BrowserJavaEnabled = browserJavaEnabled;
            this.BrowserLanguage = browserLanguage;
            this.BrowserColorDepth = browserColorDepth;
            this.BrowserScreenHeight = browserScreenHeight;
            this.BrowserScreenWidth = browserScreenWidth;
            this.BrowserTz = browserTz;
            this.BrowserUserAgent = browserUserAgent;
            this.SdkTransactionId = sdkTransactionId;
            this.SdkApplicationId = sdkApplicationId;
            this.SdkEncryptionData = sdkEncryptionData;
            this.SdkEphemeralPublicKey = sdkEphemeralPublicKey;
            this.SdkMaxTimeout = sdkMaxTimeout;
            this.SdkReferenceNumber = sdkReferenceNumber;
            this.SdkRenderOptions = sdkRenderOptions;
        }

        /// <summary>
        /// Gets or Sets BrowserAcceptHeader
        /// </summary>
        [DataMember(Name="browser_accept_header", EmitDefaultValue=true)]
        public string BrowserAcceptHeader { get; set; }

        /// <summary>
        /// Gets or Sets BrowserIp
        /// </summary>
        [DataMember(Name="browser_ip", EmitDefaultValue=true)]
        public string BrowserIp { get; set; }

        /// <summary>
        /// Gets or Sets BrowserJavascriptEnabled
        /// </summary>
        [DataMember(Name="browser_javascript_enabled", EmitDefaultValue=true)]
        public bool? BrowserJavascriptEnabled { get; set; }

        /// <summary>
        /// Gets or Sets BrowserJavaEnabled
        /// </summary>
        [DataMember(Name="browser_java_enabled", EmitDefaultValue=true)]
        public bool? BrowserJavaEnabled { get; set; }

        /// <summary>
        /// Gets or Sets BrowserLanguage
        /// </summary>
        [DataMember(Name="browser_language", EmitDefaultValue=true)]
        public string BrowserLanguage { get; set; }

        /// <summary>
        /// Gets or Sets BrowserColorDepth
        /// </summary>
        [DataMember(Name="browser_color_depth", EmitDefaultValue=true)]
        public string BrowserColorDepth { get; set; }

        /// <summary>
        /// Gets or Sets BrowserScreenHeight
        /// </summary>
        [DataMember(Name="browser_screen_height", EmitDefaultValue=true)]
        public string BrowserScreenHeight { get; set; }

        /// <summary>
        /// Gets or Sets BrowserScreenWidth
        /// </summary>
        [DataMember(Name="browser_screen_width", EmitDefaultValue=true)]
        public string BrowserScreenWidth { get; set; }

        /// <summary>
        /// Gets or Sets BrowserTz
        /// </summary>
        [DataMember(Name="browser_tz", EmitDefaultValue=true)]
        public string BrowserTz { get; set; }

        /// <summary>
        /// Gets or Sets BrowserUserAgent
        /// </summary>
        [DataMember(Name="browser_user_agent", EmitDefaultValue=true)]
        public string BrowserUserAgent { get; set; }

        /// <summary>
        /// Gets or Sets SdkTransactionId
        /// </summary>
        [DataMember(Name="sdk_transaction_id", EmitDefaultValue=true)]
        public string SdkTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets SdkApplicationId
        /// </summary>
        [DataMember(Name="sdk_application_id", EmitDefaultValue=true)]
        public string SdkApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets SdkEncryptionData
        /// </summary>
        [DataMember(Name="sdk_encryption_data", EmitDefaultValue=true)]
        public string SdkEncryptionData { get; set; }

        /// <summary>
        /// Gets or Sets SdkEphemeralPublicKey
        /// </summary>
        [DataMember(Name="sdk_ephemeral_public_key", EmitDefaultValue=true)]
        public string SdkEphemeralPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets SdkMaxTimeout
        /// </summary>
        [DataMember(Name="sdk_max_timeout", EmitDefaultValue=true)]
        public string SdkMaxTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SdkReferenceNumber
        /// </summary>
        [DataMember(Name="sdk_reference_number", EmitDefaultValue=true)]
        public string SdkReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets SdkRenderOptions
        /// </summary>
        [DataMember(Name="sdk_render_options", EmitDefaultValue=false)]
        public ThreeDSMobileSdkRenderOptions SdkRenderOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThreeDSDeviceInfo {\n");
            sb.Append("  BrowserAcceptHeader: ").Append(BrowserAcceptHeader).Append("\n");
            sb.Append("  BrowserIp: ").Append(BrowserIp).Append("\n");
            sb.Append("  BrowserJavascriptEnabled: ").Append(BrowserJavascriptEnabled).Append("\n");
            sb.Append("  BrowserJavaEnabled: ").Append(BrowserJavaEnabled).Append("\n");
            sb.Append("  BrowserLanguage: ").Append(BrowserLanguage).Append("\n");
            sb.Append("  BrowserColorDepth: ").Append(BrowserColorDepth).Append("\n");
            sb.Append("  BrowserScreenHeight: ").Append(BrowserScreenHeight).Append("\n");
            sb.Append("  BrowserScreenWidth: ").Append(BrowserScreenWidth).Append("\n");
            sb.Append("  BrowserTz: ").Append(BrowserTz).Append("\n");
            sb.Append("  BrowserUserAgent: ").Append(BrowserUserAgent).Append("\n");
            sb.Append("  SdkTransactionId: ").Append(SdkTransactionId).Append("\n");
            sb.Append("  SdkApplicationId: ").Append(SdkApplicationId).Append("\n");
            sb.Append("  SdkEncryptionData: ").Append(SdkEncryptionData).Append("\n");
            sb.Append("  SdkEphemeralPublicKey: ").Append(SdkEphemeralPublicKey).Append("\n");
            sb.Append("  SdkMaxTimeout: ").Append(SdkMaxTimeout).Append("\n");
            sb.Append("  SdkReferenceNumber: ").Append(SdkReferenceNumber).Append("\n");
            sb.Append("  SdkRenderOptions: ").Append(SdkRenderOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSDeviceInfo);
        }

        /// <summary>
        /// Returns true if ThreeDSDeviceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSDeviceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSDeviceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BrowserAcceptHeader == input.BrowserAcceptHeader ||
                    (this.BrowserAcceptHeader != null &&
                    this.BrowserAcceptHeader.Equals(input.BrowserAcceptHeader))
                ) && 
                (
                    this.BrowserIp == input.BrowserIp ||
                    (this.BrowserIp != null &&
                    this.BrowserIp.Equals(input.BrowserIp))
                ) && 
                (
                    this.BrowserJavascriptEnabled == input.BrowserJavascriptEnabled ||
                    (this.BrowserJavascriptEnabled != null &&
                    this.BrowserJavascriptEnabled.Equals(input.BrowserJavascriptEnabled))
                ) && 
                (
                    this.BrowserJavaEnabled == input.BrowserJavaEnabled ||
                    (this.BrowserJavaEnabled != null &&
                    this.BrowserJavaEnabled.Equals(input.BrowserJavaEnabled))
                ) && 
                (
                    this.BrowserLanguage == input.BrowserLanguage ||
                    (this.BrowserLanguage != null &&
                    this.BrowserLanguage.Equals(input.BrowserLanguage))
                ) && 
                (
                    this.BrowserColorDepth == input.BrowserColorDepth ||
                    (this.BrowserColorDepth != null &&
                    this.BrowserColorDepth.Equals(input.BrowserColorDepth))
                ) && 
                (
                    this.BrowserScreenHeight == input.BrowserScreenHeight ||
                    (this.BrowserScreenHeight != null &&
                    this.BrowserScreenHeight.Equals(input.BrowserScreenHeight))
                ) && 
                (
                    this.BrowserScreenWidth == input.BrowserScreenWidth ||
                    (this.BrowserScreenWidth != null &&
                    this.BrowserScreenWidth.Equals(input.BrowserScreenWidth))
                ) && 
                (
                    this.BrowserTz == input.BrowserTz ||
                    (this.BrowserTz != null &&
                    this.BrowserTz.Equals(input.BrowserTz))
                ) && 
                (
                    this.BrowserUserAgent == input.BrowserUserAgent ||
                    (this.BrowserUserAgent != null &&
                    this.BrowserUserAgent.Equals(input.BrowserUserAgent))
                ) && 
                (
                    this.SdkTransactionId == input.SdkTransactionId ||
                    (this.SdkTransactionId != null &&
                    this.SdkTransactionId.Equals(input.SdkTransactionId))
                ) && 
                (
                    this.SdkApplicationId == input.SdkApplicationId ||
                    (this.SdkApplicationId != null &&
                    this.SdkApplicationId.Equals(input.SdkApplicationId))
                ) && 
                (
                    this.SdkEncryptionData == input.SdkEncryptionData ||
                    (this.SdkEncryptionData != null &&
                    this.SdkEncryptionData.Equals(input.SdkEncryptionData))
                ) && 
                (
                    this.SdkEphemeralPublicKey == input.SdkEphemeralPublicKey ||
                    (this.SdkEphemeralPublicKey != null &&
                    this.SdkEphemeralPublicKey.Equals(input.SdkEphemeralPublicKey))
                ) && 
                (
                    this.SdkMaxTimeout == input.SdkMaxTimeout ||
                    (this.SdkMaxTimeout != null &&
                    this.SdkMaxTimeout.Equals(input.SdkMaxTimeout))
                ) && 
                (
                    this.SdkReferenceNumber == input.SdkReferenceNumber ||
                    (this.SdkReferenceNumber != null &&
                    this.SdkReferenceNumber.Equals(input.SdkReferenceNumber))
                ) && 
                (
                    this.SdkRenderOptions == input.SdkRenderOptions ||
                    (this.SdkRenderOptions != null &&
                    this.SdkRenderOptions.Equals(input.SdkRenderOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrowserAcceptHeader != null)
                    hashCode = hashCode * 59 + this.BrowserAcceptHeader.GetHashCode();
                if (this.BrowserIp != null)
                    hashCode = hashCode * 59 + this.BrowserIp.GetHashCode();
                if (this.BrowserJavascriptEnabled != null)
                    hashCode = hashCode * 59 + this.BrowserJavascriptEnabled.GetHashCode();
                if (this.BrowserJavaEnabled != null)
                    hashCode = hashCode * 59 + this.BrowserJavaEnabled.GetHashCode();
                if (this.BrowserLanguage != null)
                    hashCode = hashCode * 59 + this.BrowserLanguage.GetHashCode();
                if (this.BrowserColorDepth != null)
                    hashCode = hashCode * 59 + this.BrowserColorDepth.GetHashCode();
                if (this.BrowserScreenHeight != null)
                    hashCode = hashCode * 59 + this.BrowserScreenHeight.GetHashCode();
                if (this.BrowserScreenWidth != null)
                    hashCode = hashCode * 59 + this.BrowserScreenWidth.GetHashCode();
                if (this.BrowserTz != null)
                    hashCode = hashCode * 59 + this.BrowserTz.GetHashCode();
                if (this.BrowserUserAgent != null)
                    hashCode = hashCode * 59 + this.BrowserUserAgent.GetHashCode();
                if (this.SdkTransactionId != null)
                    hashCode = hashCode * 59 + this.SdkTransactionId.GetHashCode();
                if (this.SdkApplicationId != null)
                    hashCode = hashCode * 59 + this.SdkApplicationId.GetHashCode();
                if (this.SdkEncryptionData != null)
                    hashCode = hashCode * 59 + this.SdkEncryptionData.GetHashCode();
                if (this.SdkEphemeralPublicKey != null)
                    hashCode = hashCode * 59 + this.SdkEphemeralPublicKey.GetHashCode();
                if (this.SdkMaxTimeout != null)
                    hashCode = hashCode * 59 + this.SdkMaxTimeout.GetHashCode();
                if (this.SdkReferenceNumber != null)
                    hashCode = hashCode * 59 + this.SdkReferenceNumber.GetHashCode();
                if (this.SdkRenderOptions != null)
                    hashCode = hashCode * 59 + this.SdkRenderOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
