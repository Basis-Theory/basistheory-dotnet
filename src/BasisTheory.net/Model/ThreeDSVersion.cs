/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// ThreeDSVersion
    /// </summary>
    [DataContract]
    public partial class ThreeDSVersion :  IEquatable<ThreeDSVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSVersion" /> class.
        /// </summary>
        /// <param name="recommendedVersion">recommendedVersion.</param>
        /// <param name="availableVersions">availableVersions.</param>
        /// <param name="earliestAcsSupportedVersion">earliestAcsSupportedVersion.</param>
        /// <param name="earliestDsSupportedVersion">earliestDsSupportedVersion.</param>
        /// <param name="latestAcsSupportedVersion">latestAcsSupportedVersion.</param>
        /// <param name="latestDsSupportedVersion">latestDsSupportedVersion.</param>
        /// <param name="acsInformation">acsInformation.</param>
        public ThreeDSVersion(string recommendedVersion = default(string), List<string> availableVersions = default(List<string>), string earliestAcsSupportedVersion = default(string), string earliestDsSupportedVersion = default(string), string latestAcsSupportedVersion = default(string), string latestDsSupportedVersion = default(string), List<string> acsInformation = default(List<string>))
        {
            this.RecommendedVersion = recommendedVersion;
            this.AvailableVersions = availableVersions;
            this.EarliestAcsSupportedVersion = earliestAcsSupportedVersion;
            this.EarliestDsSupportedVersion = earliestDsSupportedVersion;
            this.LatestAcsSupportedVersion = latestAcsSupportedVersion;
            this.LatestDsSupportedVersion = latestDsSupportedVersion;
            this.AcsInformation = acsInformation;
            this.RecommendedVersion = recommendedVersion;
            this.AvailableVersions = availableVersions;
            this.EarliestAcsSupportedVersion = earliestAcsSupportedVersion;
            this.EarliestDsSupportedVersion = earliestDsSupportedVersion;
            this.LatestAcsSupportedVersion = latestAcsSupportedVersion;
            this.LatestDsSupportedVersion = latestDsSupportedVersion;
            this.AcsInformation = acsInformation;
        }

        /// <summary>
        /// Gets or Sets RecommendedVersion
        /// </summary>
        [DataMember(Name="recommended_version", EmitDefaultValue=true)]
        public string RecommendedVersion { get; set; }

        /// <summary>
        /// Gets or Sets AvailableVersions
        /// </summary>
        [DataMember(Name="available_versions", EmitDefaultValue=true)]
        public List<string> AvailableVersions { get; set; }

        /// <summary>
        /// Gets or Sets EarliestAcsSupportedVersion
        /// </summary>
        [DataMember(Name="earliest_acs_supported_version", EmitDefaultValue=true)]
        public string EarliestAcsSupportedVersion { get; set; }

        /// <summary>
        /// Gets or Sets EarliestDsSupportedVersion
        /// </summary>
        [DataMember(Name="earliest_ds_supported_version", EmitDefaultValue=true)]
        public string EarliestDsSupportedVersion { get; set; }

        /// <summary>
        /// Gets or Sets LatestAcsSupportedVersion
        /// </summary>
        [DataMember(Name="latest_acs_supported_version", EmitDefaultValue=true)]
        public string LatestAcsSupportedVersion { get; set; }

        /// <summary>
        /// Gets or Sets LatestDsSupportedVersion
        /// </summary>
        [DataMember(Name="latest_ds_supported_version", EmitDefaultValue=true)]
        public string LatestDsSupportedVersion { get; set; }

        /// <summary>
        /// Gets or Sets AcsInformation
        /// </summary>
        [DataMember(Name="acs_information", EmitDefaultValue=true)]
        public List<string> AcsInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThreeDSVersion {\n");
            sb.Append("  RecommendedVersion: ").Append(RecommendedVersion).Append("\n");
            sb.Append("  AvailableVersions: ").Append(AvailableVersions).Append("\n");
            sb.Append("  EarliestAcsSupportedVersion: ").Append(EarliestAcsSupportedVersion).Append("\n");
            sb.Append("  EarliestDsSupportedVersion: ").Append(EarliestDsSupportedVersion).Append("\n");
            sb.Append("  LatestAcsSupportedVersion: ").Append(LatestAcsSupportedVersion).Append("\n");
            sb.Append("  LatestDsSupportedVersion: ").Append(LatestDsSupportedVersion).Append("\n");
            sb.Append("  AcsInformation: ").Append(AcsInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSVersion);
        }

        /// <summary>
        /// Returns true if ThreeDSVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecommendedVersion == input.RecommendedVersion ||
                    (this.RecommendedVersion != null &&
                    this.RecommendedVersion.Equals(input.RecommendedVersion))
                ) && 
                (
                    this.AvailableVersions == input.AvailableVersions ||
                    this.AvailableVersions != null &&
                    input.AvailableVersions != null &&
                    this.AvailableVersions.SequenceEqual(input.AvailableVersions)
                ) && 
                (
                    this.EarliestAcsSupportedVersion == input.EarliestAcsSupportedVersion ||
                    (this.EarliestAcsSupportedVersion != null &&
                    this.EarliestAcsSupportedVersion.Equals(input.EarliestAcsSupportedVersion))
                ) && 
                (
                    this.EarliestDsSupportedVersion == input.EarliestDsSupportedVersion ||
                    (this.EarliestDsSupportedVersion != null &&
                    this.EarliestDsSupportedVersion.Equals(input.EarliestDsSupportedVersion))
                ) && 
                (
                    this.LatestAcsSupportedVersion == input.LatestAcsSupportedVersion ||
                    (this.LatestAcsSupportedVersion != null &&
                    this.LatestAcsSupportedVersion.Equals(input.LatestAcsSupportedVersion))
                ) && 
                (
                    this.LatestDsSupportedVersion == input.LatestDsSupportedVersion ||
                    (this.LatestDsSupportedVersion != null &&
                    this.LatestDsSupportedVersion.Equals(input.LatestDsSupportedVersion))
                ) && 
                (
                    this.AcsInformation == input.AcsInformation ||
                    this.AcsInformation != null &&
                    input.AcsInformation != null &&
                    this.AcsInformation.SequenceEqual(input.AcsInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecommendedVersion != null)
                    hashCode = hashCode * 59 + this.RecommendedVersion.GetHashCode();
                if (this.AvailableVersions != null)
                    hashCode = hashCode * 59 + this.AvailableVersions.GetHashCode();
                if (this.EarliestAcsSupportedVersion != null)
                    hashCode = hashCode * 59 + this.EarliestAcsSupportedVersion.GetHashCode();
                if (this.EarliestDsSupportedVersion != null)
                    hashCode = hashCode * 59 + this.EarliestDsSupportedVersion.GetHashCode();
                if (this.LatestAcsSupportedVersion != null)
                    hashCode = hashCode * 59 + this.LatestAcsSupportedVersion.GetHashCode();
                if (this.LatestDsSupportedVersion != null)
                    hashCode = hashCode * 59 + this.LatestDsSupportedVersion.GetHashCode();
                if (this.AcsInformation != null)
                    hashCode = hashCode * 59 + this.AcsInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
