/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// CreateTenantConnectionRequest
    /// </summary>
    [DataContract]
    public partial class CreateTenantConnectionRequest :  IEquatable<CreateTenantConnectionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTenantConnectionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTenantConnectionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTenantConnectionRequest" /> class.
        /// </summary>
        /// <param name="strategy">strategy (required).</param>
        /// <param name="options">options (required).</param>
        public CreateTenantConnectionRequest(string strategy = default(string), TenantConnectionOptions options = default(TenantConnectionOptions))
        {
            // to ensure "strategy" is required (not null)
            if (strategy == null)
            {
                throw new InvalidDataException("strategy is a required property for CreateTenantConnectionRequest and cannot be null");
            }
            else
            {
                this.Strategy = strategy;
            }

            // to ensure "options" is required (not null)
            if (options == null)
            {
                throw new InvalidDataException("options is a required property for CreateTenantConnectionRequest and cannot be null");
            }
            else
            {
                this.Options = options;
            }

        }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name="strategy", EmitDefaultValue=true)]
        public string Strategy { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=true)]
        public TenantConnectionOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTenantConnectionRequest {\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTenantConnectionRequest);
        }

        /// <summary>
        /// Returns true if CreateTenantConnectionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTenantConnectionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTenantConnectionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // Strategy (string) minLength
            if(this.Strategy != null && this.Strategy.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Strategy, length must be greater than 1.", new [] { "Strategy" });
            }

            yield break;
        }
    }

}
