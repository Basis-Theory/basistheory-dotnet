/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// TokenMetrics
    /// </summary>
    [DataContract]
    public partial class TokenMetrics :  IEquatable<TokenMetrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenMetrics" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="lastCreatedAt">lastCreatedAt.</param>
        public TokenMetrics(long count = default(long), DateTime? lastCreatedAt = default(DateTime?))
        {
            this.LastCreatedAt = lastCreatedAt;
            this.Count = count;
            this.LastCreatedAt = lastCreatedAt;
        }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long Count { get; set; }

        /// <summary>
        /// Gets or Sets LastCreatedAt
        /// </summary>
        [DataMember(Name="last_created_at", EmitDefaultValue=true)]
        public DateTime? LastCreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenMetrics {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  LastCreatedAt: ").Append(LastCreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenMetrics);
        }

        /// <summary>
        /// Returns true if TokenMetrics instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenMetrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenMetrics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.LastCreatedAt == input.LastCreatedAt ||
                    (this.LastCreatedAt != null &&
                    this.LastCreatedAt.Equals(input.LastCreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.LastCreatedAt != null)
                    hashCode = hashCode * 59 + this.LastCreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // Count (long) maximum
            if(this.Count > (long)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value less than or equal to 2147483647.", new [] { "Count" });
            }

            // Count (long) minimum
            if(this.Count < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value greater than or equal to 0.", new [] { "Count" });
            }

            // LastCreatedAt (DateTime?) maxLength
            if(this.LastCreatedAt != null && this.LastCreatedAt.ToString().Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastCreatedAt, length must be less than 40.", new [] { "LastCreatedAt" });
            }


            yield break;
        }
    }

}
