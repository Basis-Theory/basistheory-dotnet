/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BasisTheory.net.Client.OpenAPIDateConverter;

namespace BasisTheory.net.Model
{
    /// <summary>
    /// TokenReport
    /// </summary>
    [DataContract]
    public partial class TokenReport :  IEquatable<TokenReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenReport" /> class.
        /// </summary>
        /// <param name="includedMonthlyActiveTokens">includedMonthlyActiveTokens.</param>
        /// <param name="monthlyActiveTokens">monthlyActiveTokens.</param>
        /// <param name="metricsByType">metricsByType.</param>
        /// <param name="totalTokens">totalTokens.</param>
        public TokenReport(long includedMonthlyActiveTokens = default(long), long monthlyActiveTokens = default(long), Dictionary<string, TokenMetrics> metricsByType = default(Dictionary<string, TokenMetrics>), long totalTokens = default(long))
        {
            this.MetricsByType = metricsByType;
            this.IncludedMonthlyActiveTokens = includedMonthlyActiveTokens;
            this.MonthlyActiveTokens = monthlyActiveTokens;
            this.MetricsByType = metricsByType;
            this.TotalTokens = totalTokens;
        }

        /// <summary>
        /// Gets or Sets IncludedMonthlyActiveTokens
        /// </summary>
        [DataMember(Name="included_monthly_active_tokens", EmitDefaultValue=false)]
        public long IncludedMonthlyActiveTokens { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyActiveTokens
        /// </summary>
        [DataMember(Name="monthly_active_tokens", EmitDefaultValue=false)]
        public long MonthlyActiveTokens { get; set; }

        /// <summary>
        /// Gets or Sets MetricsByType
        /// </summary>
        [DataMember(Name="metrics_by_type", EmitDefaultValue=true)]
        public Dictionary<string, TokenMetrics> MetricsByType { get; set; }

        /// <summary>
        /// Gets or Sets TotalTokens
        /// </summary>
        [DataMember(Name="total_tokens", EmitDefaultValue=false)]
        public long TotalTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenReport {\n");
            sb.Append("  IncludedMonthlyActiveTokens: ").Append(IncludedMonthlyActiveTokens).Append("\n");
            sb.Append("  MonthlyActiveTokens: ").Append(MonthlyActiveTokens).Append("\n");
            sb.Append("  MetricsByType: ").Append(MetricsByType).Append("\n");
            sb.Append("  TotalTokens: ").Append(TotalTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenReport);
        }

        /// <summary>
        /// Returns true if TokenReport instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncludedMonthlyActiveTokens == input.IncludedMonthlyActiveTokens ||
                    (this.IncludedMonthlyActiveTokens != null &&
                    this.IncludedMonthlyActiveTokens.Equals(input.IncludedMonthlyActiveTokens))
                ) && 
                (
                    this.MonthlyActiveTokens == input.MonthlyActiveTokens ||
                    (this.MonthlyActiveTokens != null &&
                    this.MonthlyActiveTokens.Equals(input.MonthlyActiveTokens))
                ) && 
                (
                    this.MetricsByType == input.MetricsByType ||
                    this.MetricsByType != null &&
                    input.MetricsByType != null &&
                    this.MetricsByType.SequenceEqual(input.MetricsByType)
                ) && 
                (
                    this.TotalTokens == input.TotalTokens ||
                    (this.TotalTokens != null &&
                    this.TotalTokens.Equals(input.TotalTokens))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncludedMonthlyActiveTokens != null)
                    hashCode = hashCode * 59 + this.IncludedMonthlyActiveTokens.GetHashCode();
                if (this.MonthlyActiveTokens != null)
                    hashCode = hashCode * 59 + this.MonthlyActiveTokens.GetHashCode();
                if (this.MetricsByType != null)
                    hashCode = hashCode * 59 + this.MetricsByType.GetHashCode();
                if (this.TotalTokens != null)
                    hashCode = hashCode * 59 + this.TotalTokens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // IncludedMonthlyActiveTokens (long) maximum
            if(this.IncludedMonthlyActiveTokens > (long)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncludedMonthlyActiveTokens, must be a value less than or equal to 2147483647.", new [] { "IncludedMonthlyActiveTokens" });
            }

            // IncludedMonthlyActiveTokens (long) minimum
            if(this.IncludedMonthlyActiveTokens < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncludedMonthlyActiveTokens, must be a value greater than or equal to 0.", new [] { "IncludedMonthlyActiveTokens" });
            }



            // MonthlyActiveTokens (long) minimum
            if(this.MonthlyActiveTokens < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MonthlyActiveTokens, must be a value greater than or equal to 0.", new [] { "MonthlyActiveTokens" });
            }



            // TotalTokens (long) minimum
            if(this.TotalTokens < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalTokens, must be a value greater than or equal to 0.", new [] { "TotalTokens" });
            }

            yield break;
        }
    }

}
