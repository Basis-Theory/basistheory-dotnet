/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BasisTheory.net.Client;
using BasisTheory.net.Model;

namespace BasisTheory.net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>CreateTenantConnectionResponse</returns>
        CreateTenantConnectionResponse CreateConnection(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of CreateTenantConnectionResponse</returns>
        ApiResponse<CreateTenantConnectionResponse> CreateConnectionWithHttpInfo(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantInvitationResponse</returns>
        TenantInvitationResponse CreateInvitation(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantInvitationResponse</returns>
        ApiResponse<TenantInvitationResponse> CreateInvitationWithHttpInfo(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns></returns>
        void Delete(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>CreateTenantConnectionResponse</returns>
        CreateTenantConnectionResponse DeleteConnection(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of CreateTenantConnectionResponse</returns>
        ApiResponse<CreateTenantConnectionResponse> DeleteConnectionWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns></returns>
        void DeleteInvitation(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInvitationWithHttpInfo(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns></returns>
        void DeleteMember(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMemberWithHttpInfo(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>Tenant</returns>
        Tenant Get(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> GetWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantInvitationResponsePaginatedList</returns>
        TenantInvitationResponsePaginatedList GetInvitations(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantInvitationResponsePaginatedList</returns>
        ApiResponse<TenantInvitationResponsePaginatedList> GetInvitationsWithHttpInfo(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantMemberResponsePaginatedList</returns>
        TenantMemberResponsePaginatedList GetMembers(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantMemberResponsePaginatedList</returns>
        ApiResponse<TenantMemberResponsePaginatedList> GetMembersWithHttpInfo(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantUsageReport</returns>
        TenantUsageReport GetTenantUsageReport(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantUsageReport</returns>
        ApiResponse<TenantUsageReport> GetTenantUsageReportWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantMemberResponse</returns>
        TenantMemberResponse OwnerGet(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantMemberResponse</returns>
        ApiResponse<TenantMemberResponse> OwnerGetWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantInvitationResponse</returns>
        TenantInvitationResponse ResendInvitation(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantInvitationResponse</returns>
        ApiResponse<TenantInvitationResponse> ResendInvitationWithHttpInfo(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>Tenant</returns>
        Tenant Update(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> UpdateWithHttpInfo(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantMemberResponse</returns>
        TenantMemberResponse UpdateMember(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantMemberResponse</returns>
        ApiResponse<TenantMemberResponse> UpdateMemberWithHttpInfo(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTenantConnectionResponse</returns>
        System.Threading.Tasks.Task<CreateTenantConnectionResponse> CreateConnectionAsync(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTenantConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTenantConnectionResponse>> CreateConnectionWithHttpInfoAsync(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantInvitationResponse</returns>
        System.Threading.Tasks.Task<TenantInvitationResponse> CreateInvitationAsync(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantInvitationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantInvitationResponse>> CreateInvitationWithHttpInfoAsync(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTenantConnectionResponse</returns>
        System.Threading.Tasks.Task<CreateTenantConnectionResponse> DeleteConnectionAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTenantConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTenantConnectionResponse>> DeleteConnectionWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInvitationAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvitationWithHttpInfoAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMemberAsync(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemberWithHttpInfoAsync(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> GetAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> GetWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantInvitationResponsePaginatedList</returns>
        System.Threading.Tasks.Task<TenantInvitationResponsePaginatedList> GetInvitationsAsync(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantInvitationResponsePaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantInvitationResponsePaginatedList>> GetInvitationsWithHttpInfoAsync(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantMemberResponsePaginatedList</returns>
        System.Threading.Tasks.Task<TenantMemberResponsePaginatedList> GetMembersAsync(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantMemberResponsePaginatedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantMemberResponsePaginatedList>> GetMembersWithHttpInfoAsync(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantUsageReport</returns>
        System.Threading.Tasks.Task<TenantUsageReport> GetTenantUsageReportAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantUsageReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantUsageReport>> GetTenantUsageReportWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantMemberResponse</returns>
        System.Threading.Tasks.Task<TenantMemberResponse> OwnerGetAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantMemberResponse>> OwnerGetWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantInvitationResponse</returns>
        System.Threading.Tasks.Task<TenantInvitationResponse> ResendInvitationAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantInvitationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantInvitationResponse>> ResendInvitationWithHttpInfoAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> UpdateAsync(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> UpdateWithHttpInfoAsync(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantMemberResponse</returns>
        System.Threading.Tasks.Task<TenantMemberResponse> UpdateMemberAsync(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantMemberResponse>> UpdateMemberWithHttpInfoAsync(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantsApi : ITenantsApiSync, ITenantsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TenantsApi : ITenantsApi
    {
        private BasisTheory.net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantsApi(string basePath)
        {
            this.Configuration = BasisTheory.net.Client.Configuration.MergeConfigurations(
                BasisTheory.net.Client.GlobalConfiguration.Instance,
                new BasisTheory.net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BasisTheory.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BasisTheory.net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BasisTheory.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TenantsApi(BasisTheory.net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BasisTheory.net.Client.Configuration.MergeConfigurations(
                BasisTheory.net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BasisTheory.net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BasisTheory.net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BasisTheory.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TenantsApi(BasisTheory.net.Client.ISynchronousClient client, BasisTheory.net.Client.IAsynchronousClient asyncClient, BasisTheory.net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BasisTheory.net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BasisTheory.net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BasisTheory.net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BasisTheory.net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BasisTheory.net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>CreateTenantConnectionResponse</returns>
        public CreateTenantConnectionResponse CreateConnection(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse> localVarResponse = CreateConnectionWithHttpInfo(createTenantConnectionRequest, operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of CreateTenantConnectionResponse</returns>
        public BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse> CreateConnectionWithHttpInfo(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.Data = createTenantConnectionRequest;

            requestOptions.Operation = "TenantsApi.CreateConnection";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTenantConnectionResponse>("/tenants/self/connections", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTenantConnectionResponse</returns>
        public async System.Threading.Tasks.Task<CreateTenantConnectionResponse> CreateConnectionAsync(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse> localVarResponse = await CreateConnectionWithHttpInfoAsync(createTenantConnectionRequest, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantConnectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTenantConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse>> CreateConnectionWithHttpInfoAsync(CreateTenantConnectionRequest createTenantConnectionRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.Data = createTenantConnectionRequest;

            requestOptions.Operation = "TenantsApi.CreateConnection";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTenantConnectionResponse>("/tenants/self/connections", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantInvitationResponse</returns>
        public TenantInvitationResponse CreateInvitation(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<TenantInvitationResponse> localVarResponse = CreateInvitationWithHttpInfo(createTenantInvitationRequest, operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantInvitationResponse</returns>
        public BasisTheory.net.Client.ApiResponse<TenantInvitationResponse> CreateInvitationWithHttpInfo(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.Data = createTenantInvitationRequest;

            requestOptions.Operation = "TenantsApi.CreateInvitation";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TenantInvitationResponse>("/tenants/self/invitations", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantInvitationResponse</returns>
        public async System.Threading.Tasks.Task<TenantInvitationResponse> CreateInvitationAsync(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<TenantInvitationResponse> localVarResponse = await CreateInvitationWithHttpInfoAsync(createTenantInvitationRequest, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTenantInvitationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantInvitationResponse)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<TenantInvitationResponse>> CreateInvitationWithHttpInfoAsync(CreateTenantInvitationRequest createTenantInvitationRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.Data = createTenantInvitationRequest;

            requestOptions.Operation = "TenantsApi.CreateInvitation";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TenantInvitationResponse>("/tenants/self/invitations", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns></returns>
        public void Delete(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            DeleteWithHttpInfo(operationIndex, requestOptions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BasisTheory.net.Client.ApiResponse<Object> DeleteWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.Delete";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/self", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.Delete";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/self", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>CreateTenantConnectionResponse</returns>
        public CreateTenantConnectionResponse DeleteConnection(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse> localVarResponse = DeleteConnectionWithHttpInfo(operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of CreateTenantConnectionResponse</returns>
        public BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse> DeleteConnectionWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.DeleteConnection";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CreateTenantConnectionResponse>("/tenants/self/connections", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTenantConnectionResponse</returns>
        public async System.Threading.Tasks.Task<CreateTenantConnectionResponse> DeleteConnectionAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse> localVarResponse = await DeleteConnectionWithHttpInfoAsync(operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTenantConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<CreateTenantConnectionResponse>> DeleteConnectionWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.DeleteConnection";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CreateTenantConnectionResponse>("/tenants/self/connections", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConnection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns></returns>
        public void DeleteInvitation(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            DeleteInvitationWithHttpInfo(invitationId, operationIndex, requestOptions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BasisTheory.net.Client.ApiResponse<Object> DeleteInvitationWithHttpInfo(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("invitationId", BasisTheory.net.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            requestOptions.Operation = "TenantsApi.DeleteInvitation";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/self/invitations/{invitationId}", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInvitationAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteInvitationWithHttpInfoAsync(invitationId, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<Object>> DeleteInvitationWithHttpInfoAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("invitationId", BasisTheory.net.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            requestOptions.Operation = "TenantsApi.DeleteInvitation";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/self/invitations/{invitationId}", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns></returns>
        public void DeleteMember(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            DeleteMemberWithHttpInfo(memberId, operationIndex, requestOptions);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BasisTheory.net.Client.ApiResponse<Object> DeleteMemberWithHttpInfo(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("memberId", BasisTheory.net.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            requestOptions.Operation = "TenantsApi.DeleteMember";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/self/members/{memberId}", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMemberAsync(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMemberWithHttpInfoAsync(memberId, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<Object>> DeleteMemberWithHttpInfoAsync(Guid memberId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("memberId", BasisTheory.net.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            requestOptions.Operation = "TenantsApi.DeleteMember";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/self/members/{memberId}", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>Tenant</returns>
        public Tenant Get(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<Tenant> localVarResponse = GetWithHttpInfo(operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Tenant</returns>
        public BasisTheory.net.Client.ApiResponse<Tenant> GetWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.Get";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Tenant>("/tenants/self", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> GetAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<Tenant> localVarResponse = await GetWithHttpInfoAsync(operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<Tenant>> GetWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.Get";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Tenant>("/tenants/self", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantInvitationResponsePaginatedList</returns>
        public TenantInvitationResponsePaginatedList GetInvitations(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<TenantInvitationResponsePaginatedList> localVarResponse = GetInvitationsWithHttpInfo(status, page, start, size, operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantInvitationResponsePaginatedList</returns>
        public BasisTheory.net.Client.ApiResponse<TenantInvitationResponsePaginatedList> GetInvitationsWithHttpInfo(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            requestOptions.Operation = "TenantsApi.GetInvitations";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantInvitationResponsePaginatedList>("/tenants/self/invitations", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvitations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantInvitationResponsePaginatedList</returns>
        public async System.Threading.Tasks.Task<TenantInvitationResponsePaginatedList> GetInvitationsAsync(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<TenantInvitationResponsePaginatedList> localVarResponse = await GetInvitationsWithHttpInfoAsync(status, page, start, size, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantInvitationResponsePaginatedList)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<TenantInvitationResponsePaginatedList>> GetInvitationsWithHttpInfoAsync(TenantInvitationStatus? status = default(TenantInvitationStatus?), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            requestOptions.Operation = "TenantsApi.GetInvitations";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantInvitationResponsePaginatedList>("/tenants/self/invitations", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvitations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantMemberResponsePaginatedList</returns>
        public TenantMemberResponsePaginatedList GetMembers(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<TenantMemberResponsePaginatedList> localVarResponse = GetMembersWithHttpInfo(userId, page, start, size, operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantMemberResponsePaginatedList</returns>
        public BasisTheory.net.Client.ApiResponse<TenantMemberResponsePaginatedList> GetMembersWithHttpInfo(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("multi", "user_id", userId));
            }
            if (page != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            requestOptions.Operation = "TenantsApi.GetMembers";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantMemberResponsePaginatedList>("/tenants/self/members", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantMemberResponsePaginatedList</returns>
        public async System.Threading.Tasks.Task<TenantMemberResponsePaginatedList> GetMembersAsync(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<TenantMemberResponsePaginatedList> localVarResponse = await GetMembersWithHttpInfoAsync(userId, page, start, size, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantMemberResponsePaginatedList)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<TenantMemberResponsePaginatedList>> GetMembersWithHttpInfoAsync(List<Guid> userId = default(List<Guid>), int? page = default(int?), string start = default(string), int? size = default(int?), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("multi", "user_id", userId));
            }
            if (page != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (size != null)
            {
                requestOptions.QueryParameters.Add(BasisTheory.net.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            requestOptions.Operation = "TenantsApi.GetMembers";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantMemberResponsePaginatedList>("/tenants/self/members", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantUsageReport</returns>
        public TenantUsageReport GetTenantUsageReport(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<TenantUsageReport> localVarResponse = GetTenantUsageReportWithHttpInfo(operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantUsageReport</returns>
        public BasisTheory.net.Client.ApiResponse<TenantUsageReport> GetTenantUsageReportWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.GetTenantUsageReport";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantUsageReport>("/tenants/self/reports/usage", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantUsageReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantUsageReport</returns>
        public async System.Threading.Tasks.Task<TenantUsageReport> GetTenantUsageReportAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<TenantUsageReport> localVarResponse = await GetTenantUsageReportWithHttpInfoAsync(operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantUsageReport)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<TenantUsageReport>> GetTenantUsageReportWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.GetTenantUsageReport";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantUsageReport>("/tenants/self/reports/usage", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantUsageReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantMemberResponse</returns>
        public TenantMemberResponse OwnerGet(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<TenantMemberResponse> localVarResponse = OwnerGetWithHttpInfo(operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantMemberResponse</returns>
        public BasisTheory.net.Client.ApiResponse<TenantMemberResponse> OwnerGetWithHttpInfo(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.OwnerGet";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantMemberResponse>("/tenants/self/owner", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OwnerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantMemberResponse</returns>
        public async System.Threading.Tasks.Task<TenantMemberResponse> OwnerGetAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<TenantMemberResponse> localVarResponse = await OwnerGetWithHttpInfoAsync(operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantMemberResponse)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<TenantMemberResponse>> OwnerGetWithHttpInfoAsync(int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            requestOptions.Operation = "TenantsApi.OwnerGet";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantMemberResponse>("/tenants/self/owner", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OwnerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantInvitationResponse</returns>
        public TenantInvitationResponse ResendInvitation(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<TenantInvitationResponse> localVarResponse = ResendInvitationWithHttpInfo(invitationId, operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantInvitationResponse</returns>
        public BasisTheory.net.Client.ApiResponse<TenantInvitationResponse> ResendInvitationWithHttpInfo(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("invitationId", BasisTheory.net.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            requestOptions.Operation = "TenantsApi.ResendInvitation";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TenantInvitationResponse>("/tenants/self/invitations/{invitationId}/resend", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResendInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantInvitationResponse</returns>
        public async System.Threading.Tasks.Task<TenantInvitationResponse> ResendInvitationAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<TenantInvitationResponse> localVarResponse = await ResendInvitationWithHttpInfoAsync(invitationId, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantInvitationResponse)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<TenantInvitationResponse>> ResendInvitationWithHttpInfoAsync(Guid invitationId, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("invitationId", BasisTheory.net.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            requestOptions.Operation = "TenantsApi.ResendInvitation";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TenantInvitationResponse>("/tenants/self/invitations/{invitationId}/resend", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResendInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>Tenant</returns>
        public Tenant Update(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<Tenant> localVarResponse = UpdateWithHttpInfo(updateTenantRequest, operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of Tenant</returns>
        public BasisTheory.net.Client.ApiResponse<Tenant> UpdateWithHttpInfo(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.Data = updateTenantRequest;

            requestOptions.Operation = "TenantsApi.Update";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Tenant>("/tenants/self", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> UpdateAsync(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<Tenant> localVarResponse = await UpdateWithHttpInfoAsync(updateTenantRequest, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTenantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<Tenant>> UpdateWithHttpInfoAsync(UpdateTenantRequest updateTenantRequest, int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.Data = updateTenantRequest;

            requestOptions.Operation = "TenantsApi.Update";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Tenant>("/tenants/self", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>TenantMemberResponse</returns>
        public TenantMemberResponse UpdateMember(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            BasisTheory.net.Client.ApiResponse<TenantMemberResponse> localVarResponse = UpdateMemberWithHttpInfo(memberId, updateTenantMemberRequest, operationIndex, requestOptions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <returns>ApiResponse of TenantMemberResponse</returns>
        public BasisTheory.net.Client.ApiResponse<TenantMemberResponse> UpdateMemberWithHttpInfo(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions))
        {
            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json",
                "application/xml",
                "text/xml",
                "application/*+xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("memberId", BasisTheory.net.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            requestOptions.Data = updateTenantMemberRequest;

            requestOptions.Operation = "TenantsApi.UpdateMember";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TenantMemberResponse>("/tenants/self/members/{memberId}", requestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantMemberResponse</returns>
        public async System.Threading.Tasks.Task<TenantMemberResponse> UpdateMemberAsync(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BasisTheory.net.Client.ApiResponse<TenantMemberResponse> localVarResponse = await UpdateMemberWithHttpInfoAsync(memberId, updateTenantMemberRequest, operationIndex, requestOptions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BasisTheory.net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId"></param>
        /// <param name="updateTenantMemberRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="requestOptions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantMemberResponse)</returns>
        public async System.Threading.Tasks.Task<BasisTheory.net.Client.ApiResponse<TenantMemberResponse>> UpdateMemberWithHttpInfoAsync(Guid memberId, UpdateTenantMemberRequest updateTenantMemberRequest = default(UpdateTenantMemberRequest), int operationIndex = 0, BasisTheory.net.Client.RequestOptions requestOptions = default(BasisTheory.net.Client.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            if(requestOptions == default(BasisTheory.net.Client.RequestOptions))
            {
                requestOptions = new BasisTheory.net.Client.RequestOptions();
            }

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json", 
                "application/xml", 
                "text/xml", 
                "application/*+xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BasisTheory.net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BasisTheory.net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                requestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            requestOptions.PathParameters.Add("memberId", BasisTheory.net.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            requestOptions.Data = updateTenantMemberRequest;

            requestOptions.Operation = "TenantsApi.UpdateMember";
            requestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("BT-API-KEY")))
            {
                requestOptions.HeaderParameters.Add("BT-API-KEY", this.Configuration.GetApiKeyWithPrefix("BT-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TenantMemberResponse>("/tenants/self/members/{memberId}", requestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
