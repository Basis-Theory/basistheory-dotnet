/*
 * Basis Theory API
 *
 * ## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using BasisTheory.net.Client;
using BasisTheory.net.Api;
// uncomment below to import models
//using BasisTheory.net.Model;

namespace BasisTheory.net.Test.Api
{
    /// <summary>
    ///  Class for testing TenantsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TenantsApiTests : IDisposable
    {
        private TenantsApi instance;

        public TenantsApiTests()
        {
            instance = new TenantsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TenantsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TenantsApi
            //Assert.IsType<TenantsApi>(instance);
        }

        /// <summary>
        /// Test CreateConnection
        /// </summary>
        [Fact]
        public void CreateConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTenantConnectionRequest createTenantConnectionRequest = null;
            //var response = instance.CreateConnection(createTenantConnectionRequest);
            //Assert.IsType<CreateTenantConnectionResponse>(response);
        }

        /// <summary>
        /// Test CreateInvitation
        /// </summary>
        [Fact]
        public void CreateInvitationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTenantInvitationRequest createTenantInvitationRequest = null;
            //var response = instance.CreateInvitation(createTenantInvitationRequest);
            //Assert.IsType<TenantInvitationResponse>(response);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Fact]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Delete();
        }

        /// <summary>
        /// Test DeleteConnection
        /// </summary>
        [Fact]
        public void DeleteConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DeleteConnection();
            //Assert.IsType<CreateTenantConnectionResponse>(response);
        }

        /// <summary>
        /// Test DeleteInvitation
        /// </summary>
        [Fact]
        public void DeleteInvitationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid invitationId = null;
            //instance.DeleteInvitation(invitationId);
        }

        /// <summary>
        /// Test DeleteMember
        /// </summary>
        [Fact]
        public void DeleteMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid memberId = null;
            //instance.DeleteMember(memberId);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Fact]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Get();
            //Assert.IsType<Tenant>(response);
        }

        /// <summary>
        /// Test GetInvitations
        /// </summary>
        [Fact]
        public void GetInvitationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TenantInvitationStatus? status = null;
            //int? page = null;
            //string start = null;
            //int? size = null;
            //var response = instance.GetInvitations(status, page, start, size);
            //Assert.IsType<TenantInvitationResponsePaginatedList>(response);
        }

        /// <summary>
        /// Test GetMembers
        /// </summary>
        [Fact]
        public void GetMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> userId = null;
            //int? page = null;
            //string start = null;
            //int? size = null;
            //var response = instance.GetMembers(userId, page, start, size);
            //Assert.IsType<TenantMemberResponsePaginatedList>(response);
        }

        /// <summary>
        /// Test GetTenantUsageReport
        /// </summary>
        [Fact]
        public void GetTenantUsageReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTenantUsageReport();
            //Assert.IsType<TenantUsageReport>(response);
        }

        /// <summary>
        /// Test ResendInvitation
        /// </summary>
        [Fact]
        public void ResendInvitationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid invitationId = null;
            //var response = instance.ResendInvitation(invitationId);
            //Assert.IsType<TenantInvitationResponse>(response);
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Fact]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateTenantRequest updateTenantRequest = null;
            //var response = instance.Update(updateTenantRequest);
            //Assert.IsType<Tenant>(response);
        }

        /// <summary>
        /// Test UpdateMember
        /// </summary>
        [Fact]
        public void UpdateMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid memberId = null;
            //UpdateTenantMemberRequest updateTenantMemberRequest = null;
            //var response = instance.UpdateMember(memberId, updateTenantMemberRequest);
            //Assert.IsType<TenantMemberResponse>(response);
        }
    }
}
